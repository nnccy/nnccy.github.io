<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>git使用总结</title>
    <url>/post/e90cddc/</url>
    <content><![CDATA[<p>用来记录自己使用git中容易忘记的点，常年更新</p>
<span id="more"></span>

<h1 id="git使用总结"><a href="#git使用总结" class="headerlink" title="git使用总结"></a>git使用总结</h1><h2 id="git基本操作"><a href="#git基本操作" class="headerlink" title="git基本操作"></a>git基本操作</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*把这个目录变成Git可以管理的仓库*/</span></span><br><span class="line">git init </span><br><span class="line"></span><br><span class="line"><span class="comment">/*把文件添加到仓库*/</span></span><br><span class="line">git add readme.txt  <span class="comment">//加入readme.txt</span></span><br><span class="line">git add .  <span class="comment">//加入目录下所有文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 把文件提交到仓库*/</span></span><br><span class="line">git commit -m <span class="string">&quot;提交的说明&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*将本地改动提交到远程*/</span></span><br><span class="line">git push origin master</span><br><span class="line"></span><br><span class="line"><span class="comment">/*关联远程仓库*/</span></span><br><span class="line">git remote add origin git@github.com:nnccy/learn_django_vue.git</span><br><span class="line"></span><br><span class="line"><span class="comment">/*从远程库克隆代码*/</span></span><br><span class="line">git clone git@github.com:nnccy/learn_django_vue.git</span><br><span class="line"></span><br><span class="line"><span class="comment">/*从远程库拉取代码*/</span></span><br><span class="line">git pull</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="密钥操作"><a href="#密钥操作" class="headerlink" title="密钥操作"></a>密钥操作</h2><ul>
<li>查看本机是否已存在本地公钥<code>cat ~/.ssh/id_rsa.pub</code></li>
</ul>
<ol>
<li>否-&gt;生成   <code>ssh-keygen -t rsa -C &quot;&lt;您的邮箱&gt;&quot;</code></li>
<li>是-&gt; 拷贝到剪贴板  <code>clip &lt; ~/.ssh/id_rsa.pub</code></li>
</ol>
<ul>
<li>在github远程设置加入本机ssh密钥,按照下图粘贴密钥</li>
</ul>
<p><img data-src="%E6%88%AA%E5%9B%BE.png" alt="截图"></p>
<h2 id="配置忽略文件"><a href="#配置忽略文件" class="headerlink" title="配置忽略文件"></a>配置忽略文件</h2><p>忽略操作系统自动生成的文件，比如缩略图等；<br>忽略编译生成的中间文件、可执行文件等<br>创建<code>.gitignore</code>文件，在文件写如下内容，</p>
<ul>
<li> 忽略 .idea文件夹,以及后缀为.ini的文件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.idea/</span><br><span class="line">*.ini</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>java之面向对象学习总结</title>
    <url>/post/eddaf841/</url>
    <content><![CDATA[<p>java面向对象学习笔记总结，参考教程<a href="https://www.bilibili.com/video/BV1bt411S7fr?share_source=copy_web">Java基础视频-【深入浅出精华版视频】-刘意-经典27天完整版-黑马程序员</a></p>
<span id="more"></span>

<h2 id="匿名对象"><a href="#匿名对象" class="headerlink" title="匿名对象"></a>匿名对象</h2><p>没用名字的对象，匿名对象调用完毕就是垃圾，可以被垃圾回收器回收。</p>
<p>应用场景</p>
<ol>
<li>仅仅只调用一次的时候</li>
<li>可以作为实际参数传递</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我爱学习&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentDemo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(Student s)</span></span>&#123;</span><br><span class="line">        s.show()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//带名字的调用</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    Student s  = <span class="keyword">new</span> Student();</span><br><span class="line">    s.show();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//匿名对象</span></span><br><span class="line">	<span class="keyword">new</span> Student().show();   <span class="comment">//仅仅调用一次</span></span><br><span class="line">    </span><br><span class="line">    StudentDemo sd = <span class="keyword">new</span> StudentDemo();</span><br><span class="line">    sd.method(<span class="keyword">new</span> Student());</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><p>作用：用于对对象的数据进行初始化<br>格式：</p>
<ul>
<li>方法名和类名相同</li>
<li>没有返回值类型，连void都不能有</li>
<li>没有返回值</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123;           <span class="comment">//无参</span></span><br><span class="line">        System.out.println(<span class="string">&quot;这是构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span>&#123;           <span class="comment">//带参</span></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Student s = <span class="keyword">new</span> Student(<span class="string">&quot;小明&quot;</span>，<span class="number">12</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h2><ol>
<li>静态的意思。可以修饰成员变量和成员方法。</li>
<li>静态的特点：<ul>
<li>随着类的加载而加载</li>
<li>优先与对象存在</li>
<li>被类的所有对象共享 ，只能由一个对象赋值<br>这其实也是我们判断该不该使用静态的依据。</li>
<li>可以通过类名调用<pre><code>既可以通过对象名调用，也可以通过类名调用，建议通过类名调用。
</code></pre>
</li>
</ul>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">	<span class="comment">//非静态变量</span></span><br><span class="line">	<span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//静态变量</span></span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> num2 = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentDemo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Student s = <span class="keyword">new</span> Student();</span><br><span class="line">		System.out.println(s.num);</span><br><span class="line">		</span><br><span class="line">		System.out.println(Student.num2);</span><br><span class="line">		System.out.println(s.num2);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>静态的内存图<br>​        静态的内容在方法区的静态区</li>
</ol>
<p> [外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-3R6rd2La-1624635226013)(C:\Users\ncy\AppData\Roaming\Typora\typora-user-images\image-20210623223315341.png)]</p>
<ol start="4">
<li><p>静态的注意事项；</p>
<ul>
<li>在静态方法中没有this对象</li>
<li>静态只能访问静态(代码测试过),//因为静态随着累的加载而加载，this是随着对象的创建而存在，静态比对象先存在。</li>
</ul>
</li>
<li><p>静态变量和成员变量的区别</p>
<ul>
<li><p>所属不同<br>静态变量：属于类，类变量<br>成员变量：属于对象，对象变量，实例变量</p>
</li>
<li><p>内存位置不同<br>静态变量：方法区的静态区<br>成员变量：堆内存</p>
</li>
<li><p>生命周期不同</p>
<p>静态变量：静态变量是随着类的加载而加载，随着类的消失而消失<br>成员变量：成员变量是随着对象的创建而存在，随着对象的消失而消失</p>
</li>
<li><p>调用不同<br>静态变量：可以通过对象名调用，也可以通过类名调用<br>成员变量：只能通过对象名调用</p>
</li>
</ul>
</li>
<li><p>main方法是静态的<br>​        public:权限最大<br>​        static:不用创建对象调用<br>​        void:返回值给jvm没有意义<br>​        main:就是一个常见的名称。<br>​        String[] args:可以接收数据，提供程序的灵活性，早期为了接收键盘录入的数据</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java MainDemo hello world java</span><br><span class="line">java MainDemo <span class="number">10</span> <span class="number">20</span> <span class="number">30</span></span><br></pre></td></tr></table></figure>

<h2 id="使用JDK帮助文档"><a href="#使用JDK帮助文档" class="headerlink" title="使用JDK帮助文档"></a>使用JDK帮助文档</h2><ol>
<li><p>打开帮助文档</p>
</li>
<li><p>点击显示，找到索引，看到输入框</p>
</li>
<li><p>知道你要找谁?以Scanner举例</p>
</li>
<li><p>在输入框里面输入Scanner，然后回车</p>
</li>
<li><p>看包java.lang包下的类不需要导入，其他的全部需要导入。    </p>
<p>要导入：<br>java.util.Scanner</p>
</li>
<li><p>再简单的看看类的解释和说明，别忘了看看该类的版本</p>
</li>
<li><p>看类的结构</p>
<pre><code>成员变量    字段摘要     
构造方法    构造方法摘要 
成员方法     方法摘要
</code></pre>
</li>
<li><p>学习构造方法    </p>
<ul>
<li>有构造方法    就创建对象</li>
<li>没有构造方法    成员可能都是静态的</li>
</ul>
</li>
<li><p>看成员方法</p>
<ul>
<li>左边<br>是否静态：如果静态，可以通过类名调用<br>返回值类型：人家返回什么，你就用什么接收。</li>
<li>右边<br>看方法名：方法名称不要写错<br>参数列表：人家要什么，你就给什么；人家要几个，你就给几个</li>
</ul>
</li>
</ol>
<h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>用{}括起来的代码。</p>
<ol>
<li><p>分类：</p>
<ul>
<li>局部代码块<br>出现在方法中，用于限定变量的生命周期，及早释放，提高内存利用率。</li>
<li>构造代码块<br>在类中的成员位置，在成员方法和构造方法外，把多个构造方法中相同的代码可以放到这里，每个构造方法执行前，首先执行构造代码块，以后无论调用哪个构造方法都会先执行构造代码块。</li>
<li>静态代码块<pre><code>在类中的成员位置，用static修饰对类的数据进行初始化，仅仅只执行一次。
</code></pre>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>静态代码块,构造代码块,构造方法的顺序问题?<pre><code>静态代码块 &gt; 构造代码块 &gt; 构造方法
</code></pre>
</li>
</ol>
</li>
</ol>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>把多个类中相同的成员给提取出来定义到一个独立的类中。然后让这多个类和该独立的类产生一个关系，<br>       这多个类就具备了这些内容。这个关系叫继承。</p>
<ol>
<li>Java中如何表示继承呢?格式是什么呢?<ul>
<li>用关键字extends表示</li>
<li>格式：</li>
</ul>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 子类名 <span class="keyword">extends</span> 父类名 </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;吃饭&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;睡觉&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExtendsDemo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Student s = <span class="keyword">new</span> Student();</span><br><span class="line">		s.eat();</span><br><span class="line">		s.sleep();</span><br><span class="line">		System.out.println(<span class="string">&quot;-------------&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		Teacher t = <span class="keyword">new</span> Teacher();</span><br><span class="line">		t.eat();</span><br><span class="line">		t.sleep();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>继承的好处：<ul>
<li>提高了代码的复用性</li>
<li>提高了代码的维护性</li>
<li>让类与类产生了一个关系，是多态的前提</li>
</ul>
</li>
<li>继承的弊端：<ul>
<li>让类的耦合性增强。这样某个类的改变，就会影响其他和该类相关的类。<pre><code>原则：低耦合，高内聚。
             耦合：类与类的关系
             内聚：自己完成某件事情的能力
</code></pre>
</li>
<li>打破了封装性</li>
</ul>
</li>
<li>Java中继承的特点<ul>
<li>Java中类只支持单继承</li>
<li>Java中可以多层(重)继承(继承体系)</li>
</ul>
</li>
<li>继承的注意事项：<ul>
<li>子类不能继承父类的私有成员（私有成员变量和成员方法）</li>
<li>子类不能继承父类的构造方法，但是可以通过super去访问</li>
<li>不要为了部分功能而去继承</li>
</ul>
</li>
<li>什么时候使用继承呢? <ul>
<li>继承体现的是：is a的关系。</li>
<li>采用假设法</li>
</ul>
</li>
<li>Java继承中的成员关系<ul>
<li>成员变量<br>a:子类的成员变量名称和父类中的成员变量名称不一样，这个太简单<br>b:子类的成员变量名称和父类中的成员变量名称一样，这个怎么访问呢?<br>子类的方法访问变量的查找顺序：（就近原则）<br>在子类方法的局部范围找，有就使用。<br>在子类的成员范围找，有就使用。<br>在父类的成员范围找，有就使用。<br>找不到，就报错。</li>
<li>构造方法<ul>
<li>子类的构造方法默认会去访问父类的无参构造方法<br>是为了子类访问父类数据的初始化</li>
<li>父类中如果没有无参构造方法，怎么办?<br>子类通过super去明确调用带参构造<br>子类通过this调用本身的其他构造，但是一定会有一个去访问了父类的构造<br>让父类提供无参构造</li>
<li>成员方法<br>子类的成员方法和父类中的成员方法名称不一样，这个太简单<br>子类的成员方法和父类中的成员方法名称一样，这个怎么访问呢?<br>通过子类对象访问一个方法的查找顺序：<br>在子类中找，有就使用<br>在父类中找，有就使用<br>找不到，就报错</li>
</ul>
</li>
</ul>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">A:定义一个手机类。</span></span><br><span class="line"><span class="comment">B:通过研究，我发明了一个新手机，这个手机的作用是在打完电话后，可以听天气预报。</span></span><br><span class="line"><span class="comment">按照我们基本的设计，我们把代码给写出来了。</span></span><br><span class="line"><span class="comment">但是呢?我们又发现新手机应该是手机，所以，它应该继承自手机。</span></span><br><span class="line"><span class="comment">其实这个时候的设计，并不是最好的。</span></span><br><span class="line"><span class="comment">因为手机打电话功能，是手机本身就具备的最基本的功能。</span></span><br><span class="line"><span class="comment">所以，我的新手机是不用在提供这个功能的。</span></span><br><span class="line"><span class="comment">但是，这个时候，打电话功能就没有了。这个不好。</span></span><br><span class="line"><span class="comment">最终，还是加上这个功能。由于它继承了手机类，所以，我们就直接使用父类的功能即可。</span></span><br><span class="line"><span class="comment">那么，如何使用父类的功能呢?通过super关键字调用</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;给&quot;</span>+name+<span class="string">&quot;打电话&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewPhone</span> <span class="keyword">extends</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//System.out.println(&quot;给&quot;+name+&quot;打电话&quot;);</span></span><br><span class="line">		<span class="keyword">super</span>.call(name);</span><br><span class="line">		System.out.println(<span class="string">&quot;可以听天气预报了&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExtendsDemo9</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		NewPhone np = <span class="keyword">new</span> NewPhone();</span><br><span class="line">		np.call(<span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法重写的注意事项</p>
<ul>
<li>父类中私有方法不能被重写<br>因为父类私有方法子类根本就无法继承</li>
<li>子类重写父类方法时，访问权限不能更低(public 不能降低 private)<br>最好就一致</li>
<li>父类静态方法，子类也必须通过静态方法进行重写<br>其实这个算不上方法重写，但是现象确实如此，至于为什么算不上方法重写，多态中我会讲解<br>子类重写父类方法的时候，最好声明一模一样。</li>
</ul>
<h2 id="this和super"><a href="#this和super" class="headerlink" title="this和super"></a>this和super</h2><p>this代表本类对应的引用。<br>super代表父类存储空间的标识(可以理解为父类引用,可以操作父类的成员)<br>怎么用呢?</p>
<ul>
<li>调用成员变量<br>this.成员变量 调用本类的成员变量<br>super.成员变量 调用父类的成员变量</li>
<li>调用构造方法<br>this(…)    调用本类的构造方法<br>super(…)    调用父类的构造方法</li>
</ul>
<p>继承中构造方法的关系</p>
<ul>
<li>子类中所有的构造方法默认都会访问父类中空参数的构造方法</li>
<li>为什么呢?<br>因为子类会继承父类中的数据，可能还会使用父类的数据。<br>所以，子类初始化之前，一定要先完成父类数据的初始化。<br>注意：子类每一个构造方法的第一条语句默认都是：super();</li>
<li>调用成员方法<br>this.成员方法 调用本类的成员方法<br>super.成员方法 调用父类的成员方法</li>
</ul>
<p>如果父类没有无参构造方法，那么子类的构造方法会出现什么现象呢?<br>    报错。<br>如何解决呢?    </p>
<ul>
<li>在父类中加一个无参构造方法</li>
<li>通过使用super关键字去显示的调用父类的带参构造方法</li>
<li>子类通过this去调用本类的其他构造方法<pre><code>子类中一定要有一个去访问了父类的构造方法，否则父类数据就没有初始化。
</code></pre>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Son</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(<span class="string">&quot;随便给&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;Son的无参构造方法&quot;</span>);</span><br><span class="line">		<span class="comment">//super(&quot;随便给&quot;);</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Son</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//super(&quot;随便给&quot;);</span></span><br><span class="line">		<span class="keyword">this</span>();</span><br><span class="line">		System.out.println(<span class="string">&quot;Son的带参构造方法&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意事项：<br>    this(…)或者super(…)必须出现在第一条语句上。<br>    如果不是放在第一条语句上，就可能对父类的数据进行了多次初始化，所以必须放在第一条语句上</p>
<h2 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h2><ol>
<li>是最终的意思，可以修饰类，方法，变量。</li>
<li>特点：<ul>
<li>它修饰的类，不能被继承。</li>
<li>它修饰的方法，不能被重写。</li>
<li>它修饰的变量，是一个常量。</li>
</ul>
</li>
<li>其他<ul>
<li>局部变量<br>a:基本类型 值不能发生改变<br>b:引用类型 地址值不能发生改变，但是对象的内容是可以改变的</li>
<li>初始化时机<br>a:被final修饰的变量只能被修饰一次，只能初始化一次。<br>b:常见的给值<br>  定义的时候。(推荐)<br>  构造方法中。</li>
</ul>
</li>
</ol>
<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><ol>
<li><p>同一个对象在不同时刻体现出来的不同状态。<br>猫可以是猫的类型。猫 m = new 猫();<br>同时猫也是动物的一种，也可以把猫称为动物。<br>动物 d = new 猫();<br>在举一个例子：水在不同时刻的状态</p>
</li>
<li><p>多态的前提：<br>有继承或者实现关系。<br>有方法重写。其实没有也可以，但是如果没有就没有意义。<br>有父类或者父接口引用指向子类对象。</p>
<p>父 f = new 子</p>
</li>
</ol>
<p>​        多态的分类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">a:具体类多态		<span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;&#125;		<span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;&#125;		Fu f = <span class="keyword">new</span> Zi();	b:抽象类多态		<span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;&#125;		<span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;&#125;				Fu f = <span class="keyword">new</span> Zi();	c:接口多态		<span class="class"><span class="keyword">interface</span> <span class="title">Fu</span> </span>&#123;&#125;		<span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">implements</span> <span class="title">Fu</span> </span>&#123;&#125;				Fu f = <span class="keyword">new</span> Zi();</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>多态中的成员访问特点</p>
<ul>
<li>成员变量<br>编译看左边，运行看左边</li>
<li>构造方法<br>子类的构造都会默认访问父类构造，对父类的数据进行初始化</li>
<li>成员方法<br>编译看左边，运行看右边</li>
<li>静态方法<br>编译看左边，运行看左边<br>因为成员方法有重写。</li>
</ul>
</li>
<li><p>多态的好处：</p>
<ul>
<li>提高代码的维护性(继承体现)</li>
<li>提高代码的扩展性(多态体现)（工具类:不想重写）</li>
</ul>
</li>
<li><p>多态的弊端：</p>
<pre><code>父不能使用子的特有功能。（在子类中新写的方法，不能使用，扩充后的功能，不能使用，只能创建子类对象）子可以当作父使用，父不能当作子使用。
</code></pre>
<p>多态的弊端：</p>
<pre><code>    不能使用子类的特有功能。
</code></pre>
<p>怎么用呢?</p>
<ul>
<li>创建子类对象调用方法即可。(可以，但是很多时候不合理。而且，太占内存了)</li>
<li>把父类的引用强制转换为子类的引用。(向下转型)<br>对象间的转型问题：<br>向上转型：<pre><code>    Fu f = new Zi();
</code></pre>
向下转型：<pre><code>    Zi z = (Zi)f; //要求该f必须是能够转换为Zi的。    
</code></pre>
</li>
</ul>
</li>
<li><p>多态中的转型</p>
<ul>
<li>向上转型<br>从子到父</li>
<li>向下转型<br>从父到子</li>
</ul>
</li>
</ol>
<h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><ol>
<li>把多个共性的东西提取到一个类中，这是继承的做法。<br>但是呢，这多个共性的东西，在有些时候，方法声明一样，但是方法体。<br>也就是说，方法声明一样，但是每个具体的对象在具体实现的时候内容不一样。<br>所以，我们在定义这些共性的方法的时候，就不能给出具体的方法体。<br>而一个没有具体的方法体的方法是抽象的方法。<br>在一个类中如果有抽象方法，该类必须定义为抽象类。</li>
<li>抽象类的特点<ul>
<li>抽象类和抽象方法必须用关键字abstract修饰</li>
<li>抽象类中不一定有抽象方法,但是有抽象方法的类一定是抽象类</li>
<li>抽象类不能实例化</li>
<li>抽象类的子类<br>是一个抽象类。<br>是一个具体类。这个类必须重写抽象类中的所有抽象方法。</li>
</ul>
</li>
<li>抽象类的成员特点：<ul>
<li>成员变量<br>有变量，有常量</li>
<li>构造方法<br>有构造方法</li>
<li>成员方法<br>有抽象，有非抽象</li>
</ul>
</li>
<li>抽象类的几个小问题<ul>
<li>抽象类有构造方法，不能实例化，那么构造方法有什么用?<br>用于子类访问父类数据的初始化</li>
<li>一个类如果没有抽象方法,却定义为了抽象类，有什么用?<br>为了不让创建对象</li>
<li>abstract不能和哪些关键字共存<br>a:final    冲突<br>b:private 冲突<br>c:static 无意义</li>
</ul>
</li>
</ol>
<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><ol>
<li>猫狗案例，它们仅仅提供一些基本功能。<br>比如：猫钻火圈，狗跳高等功能，不是动物本身就具备的，<br>是在后面的培养中训练出来的，这种额外的功能，java提供了接口表示。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义动物培训接口interface AnimalTrain &#123;	public abstract void jump();&#125;//抽象类实现接口abstract class Dog implements AnimalTrain &#123;&#125;//具体类实现接口class Cat implements AnimalTrain &#123;	public void jump() &#123;		System.out.println(&quot;猫可以跳高了&quot;);	&#125;&#125;class InterfaceDemo &#123;	public static void main(String[] args) &#123;		//AnimalTrain是抽象的; 无法实例化		//AnimalTrain at = new AnimalTrain();		//at.jump();				AnimalTrain at = new Cat();		at.jump();	&#125;&#125;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>接口的特点：<ul>
<li>接口用关键字interface修饰<br>interface 接口名 {}</li>
<li>类实现接口用implements修饰<pre><code>class 类名 implements 接口名 &#123;&#125;
</code></pre>
</li>
<li>接口不能实例化</li>
<li>接口的实现类<br>a:是一个抽象类。意义不大。<br>b:是一个具体类，这个类必须重写接口中的所有抽象方法。</li>
</ul>
</li>
<li>接口的成员特点：<ul>
<li>成员变量<br>只能是常量<br>默认修饰符：public static final</li>
<li>构造方法<br>没有构造方法</li>
<li>成员方法<br>只能是 的<br>默认修饰符：public abstract</li>
</ul>
</li>
<li>类与类,类与接口,接口与接口<ul>
<li>类与类<br>继承关系，只能单继承，可以多层继承</li>
<li>类与接口<br>实现关系，可以单实现，也可以多实现。<br>还可以在继承一个类的同时，实现多个接口</li>
<li>接口与接口<br>继承关系，可以单继承，也可以多继承</li>
</ul>
</li>
<li>抽象类和接口的区别(自己补齐)?<ul>
<li>成员区别<br>抽象类：变量，常亮；有抽象方法；抽象方法，非抽象方法<br>接口：常亮；抽象方法</li>
<li>关系区别:<br>类与类：继承，单继承<br>类与接口：实现关系，可以单实现，也可以多实现。<br>接口与接口：    继承关系，可以单继承，也可以多继承</li>
<li>设计理念不同<br>抽象类：is a，抽象类中定义的是共性功能。<br>接口：like a，接口中定义的是扩展功能。</li>
</ul>
</li>
</ol>
<h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><ol>
<li>其实就是文件夹</li>
<li>作用：<ul>
<li>区分同名的类</li>
<li>对类进行分类管理<br>a:按照功能分<br>b:按照模块分</li>
</ul>
</li>
<li>包的定义(掌握)<br>package 包名;<br>多级包用.分开。</li>
<li>注意事项：(掌握)<ul>
<li>package语句必须在文件中的第一条有效语句</li>
<li>在一个java文件中，只能有一个package</li>
<li>如果没有package，默认就是无包名</li>
</ul>
</li>
<li>带包的编译和运行<ul>
<li>手动式<br>a:编写一个带包的java文件。<br>b:通过javac命令编译该java文件。<br>c:手动创建包名。<br>d:把b步骤的class文件放到c步骤的最底层包<br>e:回到和包根目录在同一目录的地方，然后运行，带包运行。</li>
<li>自动式，可以自动生成文件夹，并将class文件加到文件夹中<br>a:编写一个带包的java文件。<br>b:javac编译的时候带上-d即可<pre><code>  javac -d . HelloWorld.java
</code></pre>
c:回到和包根目录在同一目录的地方，然后运行,带包运行。</li>
</ul>
</li>
</ol>
<p>导包</p>
<ol>
<li>我们多次使用一个带包的类，非常的麻烦，这个时候，Java就提供了一个关键字import。</li>
<li>格式：<br>import 包名…类名;<br>另一种：<br>import 包名…*;(不建议)，只导包下你想要的那个类就可以。</li>
<li>package,import,class的顺序<pre><code>package &gt; import &gt; class
</code></pre>
</li>
</ol>
<h2 id="权限等级"><a href="#权限等级" class="headerlink" title="权限等级"></a>权限等级</h2><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-IOfKzruG-1624635226015)(C:\Users\ncy\AppData\Roaming\Typora\typora-user-images\image-20210625221827006.png)]</p>
<p>常见的修饰符(理解)</p>
<ol>
<li>分类：<pre><code>权限修饰符：private,默认,protected,public
       状态修饰符：static,final
       抽象修饰符：abstract
</code></pre>
</li>
<li>常见的类及其组成的修饰<pre><code>类：
           默认,public,final,abstract
           常用的：public
   成员变量：
   private,默认,protected,public,static,final
   常用的：private
</code></pre>
</li>
</ol>
<p>构造方法：<br>    private,默认,protected,public<br>    常用的：public</p>
<p>成员方法：<br>    private,默认,protected,public,static,final,abstract<br>    常用的：public</p>
<ol start="3">
<li>另外比较常见的：<pre><code>public static final int X = 10;
public static void show() &#123;&#125;
public final void show() &#123;&#125;
public abstract void show();
</code></pre>
</li>
</ol>
<p>​    </p>
<h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><ol>
<li>把类定义在另一个类的内部，该类就被称为内部类。</li>
<li>内部类的访问规则<ul>
<li>可以直接访问外部类的成员，包括私有</li>
<li>外部类要想访问内部类成员，必须创建对象</li>
</ul>
</li>
<li>内部类的分类<ul>
<li>成员内部类</li>
<li>局部内部类</li>
</ul>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;	<span class="keyword">private</span> <span class="keyword">int</span> num = <span class="number">10</span>;	<span class="comment">//成员位置	/*	class Inner &#123;			&#125;	*/		public void method() &#123;		//局部位置		class Inner &#123;				&#125;	&#125;&#125;class InnerClassDemo2 &#123;	public static void main(String[] args) &#123;			&#125;&#125;</span></span><br></pre></td></tr></table></figure>



<ol start="4">
<li><p>成员内部类</p>
<ul>
<li>private 为了数据的安全性</li>
<li>static 为了访问的方便性<pre><code>成员内部类不是静态的：
      **外部类名.内部类名 对象名 = new 外部类名.new 内部类名();**
</code></pre>
成员内部类是静态的：(成员内部类被静态修饰后，是不能通过外部对象访问的)<pre><code>      **外部类名.内部类名 对象名 = new 外部类名.内部类名();**
</code></pre>
</li>
</ul>
</li>
<li><p>成员内部类的面试题(填空)</p>
<pre><code>30,20,10
</code></pre>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;		<span class="keyword">public</span> <span class="keyword">int</span> num = <span class="number">10</span>;				<span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;			<span class="keyword">public</span> <span class="keyword">int</span> num = <span class="number">20</span>;						<span class="function"><span class="keyword">public</span> viod <span class="title">show</span><span class="params">()</span> </span>&#123;				<span class="keyword">int</span> num  = <span class="number">30</span>;								System.out.println(num);				System.out.println(<span class="keyword">this</span>.num);				System.out.println(Outer.<span class="keyword">this</span>.num);			&#125;		&#125;	&#125;</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>局部内部类<ul>
<li>局部内部类访问局部变量必须加final修饰。</li>
<li>为什么呢?<pre><code>因为局部变量使用完毕就消失，而堆内存的数据并不会立即消失。
      所以，堆内存还是用该变量，而改变量已经没有了。
      为了让该值还存在，就加final修饰。
      通过反编译工具我们看到了，加入final后，堆内存直接存储的是值，而不是变量名。
</code></pre>
</li>
</ul>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;	<span class="keyword">private</span> <span class="keyword">int</span> num  = <span class="number">10</span>;		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;		<span class="comment">//int num2 = 20;		final int num2 = 20;		class Inner &#123;			public void show() &#123;				System.out.println(num);				//从内部类中访问本地变量num2; 需要被声明为最终类型				System.out.println(num2);//20			&#125;		&#125;				System.out.println(num2);				Inner i = new Inner();		i.show();	&#125;&#125;class InnerClassDemo5 &#123;	public static void main(String[] args) &#123;		Outer o = new Outer();		o.method();	&#125;&#125;</span></span><br></pre></td></tr></table></figure>



<ol start="7">
<li>匿名内部类(掌握)<ul>
<li>是局部内部类的简化形式</li>
<li>前提<pre><code>存在一个类或者接口
</code></pre>
</li>
<li>格式:<pre><code>new 类名或者接口名() &#123;
          重写方法;
      &#125;
</code></pre>
</li>
<li>本质：<pre><code>其实是继承该类或者实现接口的子类匿名对象
</code></pre>
</li>
</ul>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Inter</span> </span>&#123;	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">show2</span><span class="params">()</span></span>;&#125;<span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;		<span class="comment">//一个方法的时候		/*		new Inter() &#123;			public void show() &#123;				System.out.println(&quot;show&quot;);			&#125;		&#125;.show();		*/				//二个方法的时候		/*		new Inter() &#123;			public void show() &#123;				System.out.println(&quot;show&quot;);			&#125;						public void show2() &#123;				System.out.println(&quot;show2&quot;);			&#125;		&#125;.show();				new Inter() &#123;			public void show() &#123;				System.out.println(&quot;show&quot;);			&#125;						public void show2() &#123;				System.out.println(&quot;show2&quot;);			&#125;		&#125;.show2();		*/				//如果我是很多个方法，就很麻烦了		//那么，我们有没有改进的方案呢?		Inter i = new Inter() &#123; //多态			public void show() &#123;				System.out.println(&quot;show&quot;);			&#125;						public void show2() &#123;				System.out.println(&quot;show2&quot;);			&#125;		&#125;;				i.show();		i.show2();	&#125;&#125;class InnerClassDemo6 &#123;	public static void main(String[] args) &#123;		Outer o = new Outer();		o.method();	&#125;&#125;</span></span><br></pre></td></tr></table></figure>



<ol start="8">
<li>匿名内部类在开发中的使用<pre><code>我们在开发的时候，会看到抽象类，或者接口作为参数。
而这个时候，我们知道实际需要的是一个子类对象。
如果该方法仅仅调用一次，我们就可以使用匿名内部类的格式简化。
</code></pre>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Person</span> </span>&#123;	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span></span>;&#125;<span class="class"><span class="keyword">class</span> <span class="title">PersonDemo</span> </span>&#123;	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(Person p)</span> </span>&#123;		p.study();	&#125;&#125;<span class="class"><span class="keyword">class</span> <span class="title">PersonTest</span> </span>&#123;	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;		PersonDemo pd = <span class="keyword">new</span> PersonDemo();		pd.method(<span class="keyword">new</span> Person() &#123;			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span> </span>&#123;				System.out.println(<span class="string">&quot;好好学习，天天向上&quot;</span>);			&#125;		&#125;);	&#125;&#125;</span><br></pre></td></tr></table></figure>



<h2 id="小知识"><a href="#小知识" class="headerlink" title="小知识"></a>小知识</h2><ol>
<li>同一个文件夹下，不同的类写在同一文件和不同文件下效果是一样的。</li>
<li>将构造方法私有，或者没有构造方法 ，外界就不能创建对象了，可通过静态，用类名访问（8-1）</li>
</ol>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>vue学习总结基础篇（概念，基本语法）</title>
    <url>/post/d3428e7e/</url>
    <content><![CDATA[<p>vue学习笔记，用于自己查阅,<a href="https://www.bilibili.com/video/BV15741177Eh?share_source=copy_web">b站教程</a> 学习笔记。</p>
<span id="more"></span>

<h1 id="一、VUE基础"><a href="#一、VUE基础" class="headerlink" title="一、VUE基础"></a>一、VUE基础</h1><h2 id="1、概念部分"><a href="#1、概念部分" class="headerlink" title="1、概念部分"></a>1、概念部分</h2><p>官网：Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。<br>有了Vue帮助我们完成VueModel层的任务，在后续的开发，我们就可以专注于数据的处理，以及DOM的编写工作了。</p>
<h2 id="2、安装方式"><a href="#2、安装方式" class="headerlink" title="2、安装方式"></a>2、安装方式</h2><ol>
<li>直接CDN引入，直接在html文件中添加如下代码<br>开发版本<br><code>&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</code><br>生产环境版本<br><code>&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.6.12&quot;&gt;&lt;/script&gt;</code></li>
<li>下载和引入<br>在<a href="https://cn.vuejs.org/v2/guide/installation.html">官网</a>直接下载vue.js代码，并用<code>script</code>标签引入</li>
<li>通过NPM安装<br>使用webpack和cli时，用这种方式</li>
</ol>
<h2 id="3、第一个vue程序"><a href="#3、第一个vue程序" class="headerlink" title="3、第一个vue程序"></a>3、第一个vue程序</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// let(变量)/const(常量)</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 编程范式: 声明式编程</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>, <span class="comment">// 用于挂载要管理的元素</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123; <span class="comment">// 定义数据</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">message</span>: <span class="string">&#x27;你好&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">name</span>: <span class="string">&#x27;coderwhy&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>vue做法<br>创建Vue对象的时候，传入了一些options：{}<br>{}中包含了el属性：该属性决定了这个Vue对象挂载到哪一个元素上，很明显，我们这里是挂载到了id为app的元素上<br>{}中包含了data属性：该属性中通常会存储一些数据<br>这些数据可以是我们直接定义出来的，比如像上面这样。<br>也可能是来自网络，从服务器加载的。<br>在标签中间加入<code>&#123;&#123;   &#125;&#125;</code>，可以直接使用vue实例中的数据<ul>
<li>js的做法(编程范式: 命令式编程)<br>1.创建div元素,设置id属性<br> 2.定义一个变量叫message<br> 3.将message变量放在前面的div元素中显示<br> 4.修改message的数据: 今天天气不错!<br> 5.将修改后的数据再次替换到div元素</li>
</ul>
</li>
</ul>
<h2 id="4、创建vue实例中传入的options"><a href="#4、创建vue实例中传入的options" class="headerlink" title="4、创建vue实例中传入的options"></a>4、创建vue实例中传入的options</h2><ol>
<li>el挂载点<br>决定之后vue实例会管理哪一个DOM</li>
<li>data<br>实例对应的数据对象</li>
<li>methods<br>定义vue的一些方法</li>
</ol>
<h1 id="VUE语法"><a href="#VUE语法" class="headerlink" title="VUE语法"></a>VUE语法</h1><h2 id="计算属性的使用"><a href="#计算属性的使用" class="headerlink" title="计算属性的使用"></a>计算属性的使用</h2><p>1、我们知道可以通过<code>&#123;&#123;  &#125;&#125;</code>显示一些data中的数据<br>但在一些情况我们需要对数据进行一些转化后再显示，比如我们有firstName和lastName两个变量，我们需要显示完整的名称，那么差值语法就是+，这样显得很啰嗦。<br>我们可以将其改为计算属性显示</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"> .........</span><br><span class="line">computed: &#123;</span><br><span class="line">      fullName: function () &#123;</span><br><span class="line">        return this.firstName + &#x27; &#x27; + this.lastName</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>计算属性内部看似是一个函数，但是<code>&#123;&#123;  &#125;&#125;</code>中的“函数”可以不用加小括号（），而函数要达到相同效果，就如下个例子，需要加上（）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;getFullName()&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">...............</span><br><span class="line">methods: &#123;</span><br><span class="line">      getFullName() &#123;</span><br><span class="line">        return this.firstName + &#x27; &#x27; + this.lastName</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>2、计算属性也可以进行一些更加复杂的操作<br>例：计算图书的总价格</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">h2</span>&gt;</span>总价格: &#123;&#123;totalPrice&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">..................</span><br><span class="line">data: &#123;</span><br><span class="line">      books: [</span><br><span class="line">        &#123;id: 110, name: &#x27;Unix编程艺术&#x27;, price: 119&#125;,</span><br><span class="line">        &#123;id: 111, name: &#x27;代码大全&#x27;, price: 105&#125;,</span><br><span class="line">        &#123;id: 112, name: &#x27;深入理解计算机原理&#x27;, price: 98&#125;,</span><br><span class="line">        &#123;id: 113, name: &#x27;现代操作系统&#x27;, price: 87&#125;,</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">      totalPrice: function () &#123;</span><br><span class="line">        let result = 0</span><br><span class="line">        for (let i=0; i &lt; this.books.length; i++) &#123;</span><br><span class="line">          result += this.books[i].price</span><br><span class="line">        &#125;</span><br><span class="line">        return result</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>补充：methods和computed看起来都可以实现我们的功能，那么为什么还要多一个计算属性这个东西呢?计算属性会进行缓存，如果多次使用时，计算属性只会调用一次。而方法会调用多次，造成缓存增大。</p>
<h2 id="v-once指令"><a href="#v-once指令" class="headerlink" title="v-once指令"></a>v-once指令</h2><p>在某些情况下，我们希望data第一次加载之后，界面不能随意的改变<br><code>&lt;h2 v-once&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</code><br>这种情况下message不能随意更改。方法也不可以，一次定义。</p>
<h2 id="v-text指令"><a href="#v-text指令" class="headerlink" title="v-text指令"></a>v-text指令</h2><p>v-text作用和<code>&#123;&#123;  &#125;&#125;</code>比较相似：都是用于将数据显示在界面中<br><code>&lt;h2 v-text=&quot;message&quot;&gt; &lt;/h2&gt;</code></p>
<h2 id="v-html指令"><a href="#v-html指令" class="headerlink" title="v-html指令"></a>v-html指令</h2><p>某些情况下，我们从服务器请求到的数据本身就是一个HTML代码<br>如果我们直接通过<code>&#123;&#123; &#125;&#125;</code>来输出，会将HTML代码也一起输出。<br>但是我们可能希望的是按照HTML格式进行解析，并且显示对应的内容。<br>例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">      message: &#x27;你好啊&#x27;,</span><br><span class="line">      url: &#x27;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span>&gt;</span>百度一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&#x27;</span><br></pre></td></tr></table></figure>

<p>那我们就可以通过<br><code>&lt;h2 v-html=&quot;url&quot;&gt;&lt;/h2&gt;</code><br>将其解析出来<br><img data-src="2020091823545529.png" alt="解析后的效果"></p>
<h2 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a>v-pre</h2><p>v-pre用于跳过这个元素和它子元素的编译过程，用于显示原本的Mustache语法。<br>例 </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-pre</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>第一个h2元素中的内容会被编译解析出来对应的内容<br>第二个h2元素中会直接显示<br><img data-src="20200919095226188.png" alt="在这里插入图片描述"></p>
<h2 id="v-cloak指令"><a href="#v-cloak指令" class="headerlink" title="v-cloak指令"></a>v-cloak指令</h2><p>在vue解析之前，界面还没有被渲染，可能界面会直接出现,也就是卡住，那我们可以使用v-cloak指令，在vue解析之前, div中有一个属性v-cloak，属性v-cloak消失。那我们可以在style标签中设置vue还没解析之前，v-cloak指令所在的标签该如何显示。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-attr">[v-cloak]</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">v-cloak</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="v-bind指令"><a href="#v-bind指令" class="headerlink" title="v-bind指令"></a>v-bind指令</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>前面我们学习的指令主要作用是将值插入到我们模板的内容当中。<br>除了内容需要动态来决定外，某些属性我们也希望动态来绑定。<br>比如动态绑定a元素的href属性<br>比如动态绑定img元素的src属性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//错误的做法: 这里不可以使用mustache语法</span><br><span class="line"> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123;imgURL&#125;&#125;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="comment">&lt;!-- 正确的做法: 使用v-bind指令 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">&quot;imgURL&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;aHref&quot;</span>&gt;</span>百度一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">........</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">message</span>: <span class="string">&#x27;你好啊&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">imgURL</span>: <span class="string">&#x27;https://img11.360buyimg.com/mobilecms/s350x250_jfs/t1/20559/1/1424/73138/5c125595E3cbaa3c8/74fc2f84e53a9c23.jpg!q90!cc_350x250.webp&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">aHref</span>: <span class="string">&#x27;http://www.baidu.com&#x27;</span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这样我们就可以向属性传值。</p>
<h3 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h3><p><code>&lt;img v-bind:src=&quot;imgSrc&quot; alt=&quot;&quot;&gt;</code><br>可以简写成为<br><code>&lt;img  :src=&quot;imgSrc&quot; alt=&quot;&quot;&gt;</code></p>
<h3 id="v-bind绑定class"><a href="#v-bind绑定class" class="headerlink" title="v-bind绑定class"></a>v-bind绑定class</h3><p>有时我们希望动态的切换class,比如根据数据变化改变字体颜色。</p>
<ol>
<li>对象语法，:class后面跟一个对象</li>
</ol>
<ul>
<li>用法一：直接通过{}绑定一个类<br><code>&lt;h2 :class=&quot;&#123;&#39;active&#39;: isActive&#125;&quot;&gt;Hello World&lt;/h2&gt;</code></li>
<li>用法二：也可以通过判断，传入多个值,其中isActive,isLine是布尔值，通过它们的值来确定相应类是否存在<br><code>&lt;h2 :class=&quot;&#123;&#39;active&#39;: isActive, &#39;line&#39;: isLine&#125;&quot;&gt;Hello </code></li>
<li>用法四：如果过于复杂，可以放在一个methods或者computed中<br>注：classes是一个计算属性,它是一个函数，可以return相应的值<br><code>&lt;h2 class=&quot;title&quot; :class=&quot;classes&quot;&gt;Hello World&lt;/h2&gt;</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">getClasses: function () &#123;</span><br><span class="line">        return &#123;active: this.isActive, line: this.isLine&#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>数组语法<br>数组语法的含义是:class后面跟的是一个数组。<br><code>&lt;h2 :class=“[‘active’, &#39;line&#39;]&quot;&gt;Hello World&lt;/h2&gt;</code><br>注意：去掉引号是active变量</li>
</ol>
<h3 id="v-bind绑定style"><a href="#v-bind绑定style" class="headerlink" title="v-bind绑定style"></a>v-bind绑定style</h3><p>我们可以利用v-bind:style来绑定一些CSS内联样式。<br>在写CSS属性名的时候，比如font-size<br>我们可以使用驼峰式 (camelCase)  fontSize<br>或短横线分隔 (kebab-case，记得用单引号括起来) ‘font-size’<br>绑定class有两种方式：</p>
<ol>
<li>对象语法<br><code>&lt;!--&lt;h2 :style=&quot;&#123;key(属性名): value(属性值)&#125;&quot;&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;--&gt;</code></li>
</ol>
<p>例1：<br><code>&lt;!--&lt;h2 :style=&quot;&#123;fontSize: &#39;50px&#39;&#125;&quot;&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;--&gt;</code><br>其中，50px’必须加上单引号, 否则是当做一个变量去解析</p>
<p>例2：<br>finalSize当成一个变量使用,<br>  <code>&lt;!--&lt;h2 :style=&quot;&#123;fontSize: finalSize&#125;&quot;&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;--&gt;</code></p>
<p>  <code>&lt;h2 :style=&quot;&#123;fontSize: finalSize + &#39;px&#39;, backgroundColor: finalColor&#125;&quot;&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</code><br>  例3：使用函数返回值为对象传值</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">:style</span>=<span class="string">&quot;getStyles()&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    methods: &#123;</span><br><span class="line">    getStyles: function () &#123;</span><br><span class="line">      return &#123;fontSize: this.finalSize + &#x27;px&#x27;, backgroundColor: this.finalColor&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>数组语法<br>当要改动的样式比较多的时候，可以考虑用一下数组语法</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">:style</span>=<span class="string">&quot;[baseStyle, baseStyle1]&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    data: &#123;</span><br><span class="line">      message: &#x27;你好啊&#x27;,</span><br><span class="line">      baseStyle: &#123;backgroundColor: &#x27;red&#x27;&#125;,</span><br><span class="line">      baseStyle1: &#123;fontSize: &#x27;100px&#x27;&#125;,</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="v-on指令"><a href="#v-on指令" class="headerlink" title="v-on指令"></a>v-on指令</h2><p>1、v-on指令用于事件监听，与用户交互，缩写是@<br>例，计数器</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;counter&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;decrement&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">counter</span>: <span class="number">0</span></span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">increment</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.counter++</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">decrement</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.counter--</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、参数问题<br>当方法中无参传入时，如上例所示，可省略小括号。</p>
<p>3、v-on修饰符</p>
<ul>
<li>.stop - 调用 event.stopPropagation()。<br>阻止子元素方法事件冒泡到父元素。例：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">&quot;divClick&quot;</span>&gt;</span></span><br><span class="line">   aaaaaaa</span><br><span class="line">   <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">&quot;btnClick&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>若不使用.stop修饰符，在点击按钮时，父元素的divClick方法也会被执行，这种情况一般是我们不想遇到的。</p>
<ul>
<li>.prevent - 调用 event.preventDefault()。<br>阻止元素发生默认的行为</li>
<li>. @keyup.enter=”keyUp” -<br>监听某个键盘的键帽，此例只有按下回车才会执行回调。。</li>
<li>.native - 监听组件根元素的原生事件。</li>
<li>.once - 只触发一次回调。</li>
</ul>
<h2 id="v-if指令"><a href="#v-if指令" class="headerlink" title="v-if指令"></a>v-if指令</h2><p>v-if、v-else-if、v-else<br>条件指令，可根据表达式的值在DOM中渲染销毁组件<br>v-if的原理：<br>v-if后面的条件为false时，对应的元素以及其子元素不会渲染。<br>也就是根本没有不会有对应的标签出现在DOM中。<br>例：根据学生分数值，在页面显示优秀，良好，及格等标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-if</span>=<span class="string">&quot;score&gt;=90&quot;</span>&gt;</span>优秀<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-else-if</span>=<span class="string">&quot;score&gt;=80&quot;</span>&gt;</span>良好<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-else-if</span>=<span class="string">&quot;score&gt;=60&quot;</span>&gt;</span>及格<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-else</span>&gt;</span>不及格<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="v-show指令"><a href="#v-show指令" class="headerlink" title="v-show指令"></a>v-show指令</h2><p><code> &lt;h2 v-show=&quot;isShow&quot; id=&quot;bbb&quot;&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</code><br>当isShow为true时,message内容显示，否则内容消失</p>
<p>v-show的用法和v-if非常相似，也用于决定一个元素是否渲染：<br>两者的区别：<br>v-if当条件为false时，压根不会有对应的元素在DOM中。<br>v-show当条件为false时，仅仅是将元素的display属性设置为none而已。</p>
<h2 id="v-for指令"><a href="#v-for指令" class="headerlink" title="v-for指令"></a>v-for指令</h2><h3 id="v-for遍历数组"><a href="#v-for遍历数组" class="headerlink" title="v-for遍历数组"></a>v-for遍历数组</h3><p>格式：v-for=(item, index) in 数组<br>其中的index就代表了取出的item在原数组的索引值。<br><code>&lt;li v-for=&quot;item in names&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;</code></p>
<h3 id="v-for遍历对象"><a href="#v-for遍历对象" class="headerlink" title="v-for遍历对象"></a>v-for遍历对象</h3><p>v-for可以用户遍历对象：<br>比如某个对象中存储着你的个人信息，我们希望以列表的形式显示出来。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in info&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--2.获取key和value 格式: (value, key) --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(value, key) in info&quot;</span>&gt;</span>&#123;&#123;value&#125;&#125;-&#123;&#123;key&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!--3.获取key和value和index 格式: (value, key, index) --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(value, key, index) in info&quot;</span>&gt;</span>&#123;&#123;value&#125;&#125;-&#123;&#123;key&#125;&#125;-&#123;&#123;index&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">......</span><br><span class="line">data: &#123;</span><br><span class="line">      info: &#123;</span><br><span class="line">        name: &#x27;why&#x27;,</span><br><span class="line">        age: 18,</span><br><span class="line">        height: 1.88</span><br><span class="line">      &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<h2 id="v-model指令"><a href="#v-model指令" class="headerlink" title="v-model指令"></a>v-model指令</h2><p>1、简介<br>v-model用于表单绑定<br>来实现表单元素和数据的双向绑定。<br>当我们在输入框输入内容时<br>因为input中的v-model绑定了message，所以会实时将输入的内容传递给message，message发生改变。<br>当message发生改变时，因为上面我们使用Mustache语法，将message的值插入到DOM中，所以DOM会发生响应的改变。<br>所以，通过v-model实现了双向的绑定。<br>2、原理<br>v-model其实是一个语法糖，它的背后本质上是包含两个操作：</p>
<ol>
<li>v-bind绑定一个value属性</li>
<li>v-on指令给当前元素绑定input事件<br><img data-src="20200926105854937.png" alt="在这里插入图片描述"></li>
</ol>
<p>3、radio<br>当存在多个单选框时<br>lable标签：为input元素定义标注，其不会为用户呈现任何特殊效果，他的作用是在label元素中点击文本，则会触发控件，其for属性应当与相关元素的 id 属性相同。for” 属性可把 label 绑定到另外一个元素，规定应与哪个表单元素绑定。<br>input 标签规定了用户可以在其中输入数据的输入字段。</p>
<ul>
<li>输入字段可通过多种方式改变，取决于 type 属性。type 属性规定要显示的 input元素的类型。</li>
<li>value属性指定 <code>&lt;input&gt;</code> 元素 value 的值<br>例程：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;male&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;male&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>男</span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;female&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;female&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>女</span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>您选择的性别是: &#123;&#123;sex&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">message</span>: <span class="string">&#x27;你好啊&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">sex</span>: <span class="string">&#x27;女&#x27;</span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>4、checkbox<br>定义复选框。<br>例程：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>您的爱好是: &#123;&#123;hobbies&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">v-for</span>=<span class="string">&quot;item in originHobbies&quot;</span> <span class="attr">:for</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;item&quot;</span> <span class="attr">:id</span>=<span class="string">&quot;item&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>5、select<br>select标签用来创建下拉列表。<br>select 标签中的 <option> 标签定义了列表中的可用选项。<br>multiple    当该属性为 true 时，可选择多个选项。<br>例程：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;abc&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;fruit&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;苹果&quot;</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;香蕉&quot;</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;榴莲&quot;</span>&gt;</span>榴莲<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;葡萄&quot;</span>&gt;</span>葡萄<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>您选择的水果是: &#123;&#123;fruit&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>6、v-model修饰符</p>
<ul>
<li>lazy修饰符：<br>默认情况下，v-model默认是在input事件中同步输入框的数据的。<br>lazy修饰符可以让数据在失去焦点或者回车时才会更新：</li>
<li>number修饰符：<br>默认情况下，在输入框中无论我们输入的是字母还是数字，都会被当做字符串类型进行处理。<br>number修饰符可以让在输入框中输入的内容自动转成数字类型：</li>
<li>trim修饰符：<br>如果输入的内容首尾有很多空格，通常我们希望将其去除<br>trim修饰符可以过滤内容左右两边的空格</li>
</ul>
<h2 id="检测数组更新"><a href="#检测数组更新" class="headerlink" title="检测数组更新"></a>检测数组更新</h2><p>因为Vue是响应式的，所以当数据发生变化时，Vue会自动检测数据变化，视图会发生对应的更新。<br>Vue中包含了一组观察数组编译的方法，使用它们改变数组也会触发视图的更新。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 1.push() 在数组最后添加元素</span><br><span class="line">       //this.letters.push(&#x27;aaa&#x27;)</span><br><span class="line">      // this.letters.push(&#x27;aaaa&#x27;, &#x27;bbbb&#x27;, &#x27;cccc&#x27;)</span><br><span class="line"></span><br><span class="line">      // 2.pop(): 删除数组中的最后一个元素</span><br><span class="line">      // this.letters.pop();</span><br><span class="line"></span><br><span class="line">      // 3.shift(): 删除数组中的第一个元素</span><br><span class="line">      // this.letters.shift();</span><br><span class="line"></span><br><span class="line">      // 4.unshift(): 在数组最前面添加元素</span><br><span class="line">      // this.letters.unshift()</span><br><span class="line">      // this.letters.unshift(&#x27;aaa&#x27;, &#x27;bbb&#x27;, &#x27;ccc&#x27;)</span><br><span class="line"></span><br><span class="line">      // 5.splice作用: 删除元素/插入元素/替换元素</span><br><span class="line">      //第一个参数，定位开始位置</span><br><span class="line">      // 删除元素: 第二个参数传入你要删除几个元素(如果没有传,就删除后面所有的元素)</span><br><span class="line">      // 替换元素: 第二个参数, 表示我们要替换几个元素, 后面是用于替换前面的元素</span><br><span class="line">      // 插入元素: 第二个参数, 传入0, 并且后面跟上要插入的元素</span><br><span class="line">      // splice(start)</span><br><span class="line">      // splice(start):</span><br><span class="line">      //this.letters.splice(1, 3, &#x27;m&#x27;, &#x27;n&#x27;, &#x27;l&#x27;, &#x27;x&#x27;)</span><br><span class="line">      // this.letters.splice(1, 0, &#x27;x&#x27;, &#x27;y&#x27;, &#x27;z&#x27;)</span><br><span class="line"></span><br><span class="line">      // 5.sort()    数组排序</span><br><span class="line">      // this.letters.sort()</span><br><span class="line"></span><br><span class="line">      // 6.reverse()  数组翻转</span><br><span class="line">      // this.letters.reverse()</span><br></pre></td></tr></table></figure>

<p>// 注意: 通过索引值修改数组中的元素<br>         this.letters[0] = ‘bbbbbb’;  这种界面不能实时更新</p>
<pre><code>    // set(要修改的对象, 索引值, 修改后的值)
    // Vue.set(this.letters, 0, &#39;bbbbbb&#39;
</code></pre>
<h2 id="js高阶函数"><a href="#js高阶函数" class="headerlink" title="js高阶函数"></a>js高阶函数</h2><h3 id="1-filter函数的使用"><a href="#1-filter函数的使用" class="headerlink" title="1.filter函数的使用"></a>1.filter函数的使用</h3><p>filter函数，用来过滤符合要求的数组中的值<br>filter中的回调函数有一个要求: 必须返回一个boolean值<br>true: 当返回true时, 函数内部会自动将这次回调的n加入到新的数组中<br>false: 当返回false时, 函数内部会过滤掉这次的n<br>例：<br>给出一个数组  const nums = [10, 20, 111, 222, 444, 40, 50]<br>挑出所有少于100的值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">let newNums = nums.filter(function (n) &#123;</span><br><span class="line">  return n &lt; 100</span><br><span class="line">&#125;)</span><br><span class="line">console.log(newNums);</span><br></pre></td></tr></table></figure>

<h3 id="2-map函数的使用"><a href="#2-map函数的使用" class="headerlink" title="2.map函数的使用"></a>2.map函数的使用</h3><p>对数组中的值进行处理，例如都乘二</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">let new2Nums = newNums.map(function(n))&#123;</span><br><span class="line">	return n*2;</span><br><span class="line">&#125;</span><br><span class="line"> console.log(newNums);</span><br></pre></td></tr></table></figure>

<h3 id="3-reduce函数的使用"><a href="#3-reduce函数的使用" class="headerlink" title="3.reduce函数的使用"></a>3.reduce函数的使用</h3><p>对数组中的元素进行汇总<br>例：求和</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">let total = new2Nums.reduce(function (preValue, n) &#123;</span><br><span class="line"> return preValue + n</span><br><span class="line">&#125;, 0)</span><br><span class="line">console.log(total);</span><br></pre></td></tr></table></figure>

<p>其中上面的0，为初始值，preValue值为每一次运算返回的值</p>
<h3 id="4，三种汇总"><a href="#4，三种汇总" class="headerlink" title="4，三种汇总"></a>4，三种汇总</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let total = nums.filter(function (n) &#123;</span><br><span class="line">  return n &lt; 100</span><br><span class="line">&#125;).map(function (n) &#123;</span><br><span class="line">  return n * 2</span><br><span class="line">&#125;).reduce(function (prevValue, n) &#123;</span><br><span class="line">  return prevValue + n</span><br><span class="line">&#125;, 0)</span><br><span class="line">console.log(total);</span><br></pre></td></tr></table></figure>

<h2 id="组件化开发"><a href="#组件化开发" class="headerlink" title="组件化开发"></a>组件化开发</h2><h3 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h3><p>将复杂的问题拆解成简单的小问题，便于处理，放在网页中，就是将一个页面分成一个个小的功能块，每个功能块完成属于自己这部分独立的功能，便于后续地管理和扩展，也便于移植，可复用<br><img data-src="watermark.png" alt="watermark"></p>
<h3 id="二、使用步骤"><a href="#二、使用步骤" class="headerlink" title="二、使用步骤"></a>二、使用步骤</h3><p>分为</p>
<ul>
<li>创建组件构造器（调用Vue.extend()方法，template下加入模板）</li>
<li>注册组件 （调用Vue.component(方法)）</li>
<li>使用组件 （在Vue实例范围内使用）</li>
</ul>
<p>代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">my-cpn</span>&gt;</span> </span><br><span class="line">  <span class="comment">&lt;!--使用组件--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="comment">//创建组件构造器对象</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> cpnC = Vue.extend(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">template</span>:<span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="javascript">    &lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">      &lt;h2&gt;我是标题&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">      &lt;p&gt;我是内容1&lt;/p&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">      &lt;p&gt;我是内容2&lt;/p&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">    &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">    `</span></span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="comment">//注册组件</span></span></span><br><span class="line"><span class="javascript">  Vue.component(<span class="string">&#x27;my-cpn&#x27;</span>,cpnC)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3、全局组件和局部组件"><a href="#3、全局组件和局部组件" class="headerlink" title="3、全局组件和局部组件"></a>3、全局组件和局部组件</h3><p>当我们通过调用Vue.component()注册组件时，组件的注册是全局的<br>这意味着该组件可以在任意Vue示例下使用。<br>如果我们注册的组件是挂载在某个实例中, 那么就是一个局部组件<br>例：下面组件挂载到app中，那么就只能在id=app下使用。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app2&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 1.创建组件构造器</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> cpnC = Vue.extend(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="javascript">      &lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">        &lt;h2&gt;我是标题&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">        &lt;p&gt;我是内容,哈哈哈哈啊&lt;/p&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">      &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">    `</span></span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 2.注册组件(全局组件, 意味着可以在多个Vue的实例下面使用)</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// Vue.component(&#x27;cpn&#x27;, cpnC)</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 疑问: 怎么注册的组件才是局部组件了?</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">message</span>: <span class="string">&#x27;你好啊&#x27;</span></span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// cpn使用组件时的标签名</span></span></span><br><span class="line"><span class="javascript">      <span class="attr">cpn</span>: cpnC</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app2 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app2&#x27;</span></span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="父组件和子组件"><a href="#父组件和子组件" class="headerlink" title="父组件和子组件"></a>父组件和子组件</h3><p>组件和组件之间存在层级关系<br>而其中一种非常重要的关系就是父子组件的关系<br>将子组件注册到父组件的组件构造器中<br>子组件不能直接使用，通过父组件调用。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="handlebars"><span class="xml"></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">  // 1.创建第一个组件构造器(子组件)</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">  const cpnC1 = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    template: `</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是标题1<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是内容, 哈哈哈哈<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    `</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">  &#125;)</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">  // 2.创建第二个组件构造器(父组件)</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">  const cpnC2 = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    template: `</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是标题2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是内容, 呵呵呵呵<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        <span class="tag">&lt;<span class="name">cpn1</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn1</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    `,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    components: &#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">      cpn1: cpnC1</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    &#125;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">  &#125;)</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">  // root组件</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">  const app = new Vue(&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    el: &#x27;#app&#x27;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    data: &#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">      message: &#x27;你好啊&#x27;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    &#125;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    components: &#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">      cpn2: cpnC2</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    &#125;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">  &#125;)</span></span></span><br><span class="line"><span class="xml"><span class="handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="注册组件的简写"><a href="#注册组件的简写" class="headerlink" title="注册组件的简写"></a>注册组件的简写</h3><p>在注册之时将组件构造器加到注册时<br>简写前:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">const cpnC = Vue.extend(&#123;</span><br><span class="line">  template:`</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是内容1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是内容2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  `</span><br><span class="line">&#125;)</span><br><span class="line">//注册组件</span><br><span class="line">Vue.component(&#x27;my-cpn&#x27;,cpnC)</span><br><span class="line"></span><br><span class="line">  const app = new Vue(&#123;</span><br><span class="line">  el: &#x27;#app&#x27;,</span><br><span class="line">  data: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>简写后：</p>
<ul>
<li>全局组件</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Vue.component(&#x27;cpn1&#x27;, &#123;</span><br><span class="line">  template: `</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是标题1<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是内容, 哈哈哈哈<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  `</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>局部组件</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">const app = new Vue(&#123;</span><br><span class="line">  el: &#x27;#app&#x27;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: &#x27;你好啊&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    &#x27;cpn2&#x27;: &#123;</span><br><span class="line">      template: `</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是标题2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是内容, 呵呵呵<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  `</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="模板分离写法"><a href="#模板分离写法" class="headerlink" title="模板分离写法"></a>模板分离写法</h3><p>以上组件html代码都在template中，我们希望将html代码分离出来，然后挂载到相应组件中，这样更加清晰<br>给template标签加个id,然后再template中调用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是内容,呵呵呵<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 1.注册一个全局组件</span></span></span><br><span class="line"><span class="javascript">  Vue.component(<span class="string">&#x27;cpn&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">template</span>: <span class="string">&#x27;#cpn&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">title</span>: <span class="string">&#x27;abc&#x27;</span></span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br></pre></td></tr></table></figure>

<h3 id="组件数据的存放"><a href="#组件数据的存放" class="headerlink" title="组件数据的存放"></a>组件数据的存放</h3><p>Vue组件有自己保存数据的地方。组件对象也有一个data属性，只是这个data属性必须是一个函数。而且这个函数返回一个对象，对象内部保存着数据</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Vue.component(&#x27;cpn&#x27;, &#123;</span><br><span class="line">    template: &#x27;#cpn&#x27;,</span><br><span class="line">     data() &#123;</span><br><span class="line">       return &#123;</span><br><span class="line">         counter: 0</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;,</span><br><span class="line"></span><br><span class="line">    methods: &#123;</span><br><span class="line">      increment() &#123;</span><br><span class="line">        this.counter++</span><br><span class="line">      &#125;,</span><br><span class="line">      decrement() &#123;</span><br><span class="line">        this.counter--</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<h3 id="组件通信："><a href="#组件通信：" class="headerlink" title="组件通信："></a>组件通信：</h3><p>如何进行父子组件间的通信呢？Vue官方提到<br>通过props向子组件传递数据<br>通过事件向父组件发送消息<br><img data-src="watermark.png" alt="watermark"></p>
<h4 id="父组件向子组件传递数据"><a href="#父组件向子组件传递数据" class="headerlink" title="父组件向子组件传递数据"></a>父组件向子组件传递数据</h4><p>在开发中，往往一些数据确实需要从上层传递到下层：<br>比如在一个页面中，我们从服务器请求到了很多的数据。<br>其中一部分数据，并非是我们整个页面的大组件来展示的，而是需要下面的子组件进行展示。<br>这个时候，并不会让子组件再次发送一个网络请求，而是直接让大组件(父组件)将数据传递给小组件(子组件)<br>Vue实例和子组件的通信和父组件和子组件的通信过程是一样的。<br>props基本用法<br>在组件中，使用选项props来声明需要从父级接收到的数据。<br>props的值有两种方式：<br>方式一：字符串数组，数组中的字符串就是传递时的名称。<br>方式二：对象，对象可以设置传递时的类型，也可以设置默认值等。（常用）</p>
<ol>
<li>一个最简单的props传递。</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">child-cpn</span> <span class="attr">:message</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child-cpn</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;childCpn&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"> 显示的信息：&#123;&#123;message&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 1.注册组件</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">message</span>: <span class="string">&#x27;你好啊&#x27;</span></span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">components</span>:&#123;</span></span><br><span class="line"><span class="javascript">      <span class="string">&#x27;child-cpn&#x27;</span>:&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">template</span>:<span class="string">&#x27;#childCpn&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">props</span>:[<span class="string">&#x27;message&#x27;</span>]  <span class="comment">//props传值</span></span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>传对象值，可以设置默认类型</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 父传子: props</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> cpn = &#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">template</span>: <span class="string">&#x27;#cpn&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="comment">// props: [&#x27;cmovies&#x27;, &#x27;cmessage&#x27;],</span></span></span><br><span class="line"><span class="javascript">    <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 1.类型限制</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// cmovies: Array,</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// cmessage: String,</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 2.提供一些默认值, 以及必传值</span></span></span><br><span class="line"><span class="javascript">      <span class="attr">cmessage</span>: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">type</span>: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">default</span>: <span class="string">&#x27;aaaaaaaa&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">required</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 类型是对象或者数组时, 默认值必须是一个函数</span></span></span><br><span class="line"><span class="javascript">      <span class="attr">cmovies</span>: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">type</span>: <span class="built_in">Array</span>,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">default</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> []</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;&#125;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">message</span>: <span class="string">&#x27;你好啊&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">movies</span>: [<span class="string">&#x27;海王&#x27;</span>, <span class="string">&#x27;海贼王&#x27;</span>, <span class="string">&#x27;海尔兄弟&#x27;</span>]</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="javascript">      cpn</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br></pre></td></tr></table></figure>

<h4 id="子传父"><a href="#子传父" class="headerlink" title="子传父"></a>子传父</h4><p>当子组件需要向父组件传递数据时，就要用到自定义事件了。<br>我们之前学习的v-on不仅仅可以用于监听DOM事件，也可以用于组件间的自定义事件。<br>自定义事件的流程：</p>
<ul>
<li>在子组件中，通过$emit()来触发事件。</li>
<li>在父组件中，通过v-on来监听子组件事件。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--父组件模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span> @<span class="attr">item-click</span>=<span class="string">&quot;cpnClick&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--子组件模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-for</span>=<span class="string">&quot;item in categories&quot;</span></span></span><br><span class="line"><span class="tag">            @<span class="attr">click</span>=<span class="string">&quot;btnClick(item)&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123;item.name&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 1.子组件</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> cpn = &#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">template</span>: <span class="string">&#x27;#cpn&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">categories</span>: [</span></span><br><span class="line"><span class="javascript">          &#123;<span class="attr">id</span>: <span class="string">&#x27;aaa&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;热门推荐&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">          &#123;<span class="attr">id</span>: <span class="string">&#x27;bbb&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;手机数码&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">          &#123;<span class="attr">id</span>: <span class="string">&#x27;ccc&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;家用家电&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">          &#123;<span class="attr">id</span>: <span class="string">&#x27;ddd&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;电脑办公&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">        ]</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">btnClick</span>(<span class="params">item</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 发射事件: 自定义事件</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$emit(<span class="string">&#x27;item-click&#x27;</span>, item)</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 2.父组件</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">message</span>: <span class="string">&#x27;你好啊&#x27;</span></span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="javascript">      cpn</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">cpnClick</span>(<span class="params">item</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&#x27;cpnClick&#x27;</span>, item);</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="父子之间"><a href="#父子之间" class="headerlink" title="父子之间"></a>父子之间</h3><p>有时候我们需要父组件直接访问子组件，子组件直接访问父组件，或者是子组件访问跟组件。<br>父组件访问子组件：使用<code>$children</code>或<code>$refs reference</code>(引用)<br>子组件访问父组件：使用<code>$parent</code></p>
<h4 id="父访问子"><a href="#父访问子" class="headerlink" title="父访问子"></a>父访问子</h4><ol>
<li>$children方式 ,(数组方式)</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> console.log(this.$children);</span><br><span class="line"> for (let c of this.$children) &#123;</span><br><span class="line">   console.log(c.name);</span><br><span class="line">   c.showMessage();</span><br><span class="line">&#125;</span><br><span class="line"> console.log(this.$children[3].name);</span><br></pre></td></tr></table></figure>

<p>2，<code>$refs =&gt;</code> 对象类型, 默认是一个空的对象<br>通过<code>$children</code>访问子组件时，是一个数组类型，访问其中的子组件必须通过索引值。<br>但是当子组件过多，我们需要拿到其中一个时，往往不能确定它的索引值，甚至还可能会发生变化。<br>有时候，我们想明确获取其中一个特定的组件，这个时候就可以使用<code>$refs</code></p>
<p><code>$refs</code> 的使用：<br><code>$refs</code> 和ref指令通常是一起使用的。<br>首先，我们通过ref给某一个子组件绑定一个特定的ID。<br>其次，通过<code>this.$refs.ID</code>就可以访问到该组件了。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">my-cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">y-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">y-cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span> <span class="attr">ref</span>=<span class="string">&quot;aaa&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btnClick&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是子组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">message</span>: <span class="string">&#x27;你好啊&#x27;</span></span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">btnClick</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        </span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.$refs.aaa.name);</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">cpn</span>: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">template</span>: <span class="string">&#x27;#cpn&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">name</span>: <span class="string">&#x27;我是子组件的name&#x27;</span></span></span><br><span class="line"><span class="javascript">          &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">          <span class="function"><span class="title">showMessage</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&#x27;showMessage&#x27;</span>);</span></span><br><span class="line"><span class="javascript">          &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="子访问父（避免使用）"><a href="#子访问父（避免使用）" class="headerlink" title="子访问父（避免使用）"></a>子访问父（避免使用）</h4><p>如果我们想在子组件中直接访问父组件，可以通过$parent</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是cpn组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ccpn</span>&gt;</span><span class="tag">&lt;/<span class="name">ccpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;ccpn&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是子组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btnClick&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">message</span>: <span class="string">&#x27;你好啊&#x27;</span></span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">cpn</span>: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">template</span>: <span class="string">&#x27;#cpn&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">name</span>: <span class="string">&#x27;我是cpn组件的name&#x27;</span></span></span><br><span class="line"><span class="javascript">          &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">ccpn</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">template</span>: <span class="string">&#x27;#ccpn&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">              <span class="function"><span class="title">btnClick</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                 <span class="number">1.</span>访问父组件$parent</span></span><br><span class="line"><span class="javascript">                 <span class="built_in">console</span>.log(<span class="built_in">this</span>.$parent);</span></span><br><span class="line"><span class="javascript">                 <span class="built_in">console</span>.log(<span class="built_in">this</span>.$parent.name);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                 <span class="number">2.</span>访问根组件$root</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="built_in">this</span>.$root);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="built_in">this</span>.$root.message);</span></span><br><span class="line"><span class="javascript">              &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">          &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="组件化高级"><a href="#组件化高级" class="headerlink" title="组件化高级"></a>组件化高级</h3><h4 id="slot（插槽）"><a href="#slot（插槽）" class="headerlink" title="slot（插槽）"></a>slot（插槽）</h4><p>组件的插槽是为了让我们封装的组件更加具有扩展性。<br>让使用者可以决定组件内部的一些内容到底展示什么。<br>最好的封装方式就是将共性抽取到组件中，将不同暴露为插槽。<br>一旦我们预留了插槽，就可以让使用者根据自己的需求，决定插槽中插入什么内容。<br>插槽的基本使用 <slot></slot><br>插槽的默认值 <slot>button</slot><br>如果有多个值, 同时放入到组件进行替换时, 一起作为替换元素<br>例：在模板中加入插槽，默认值是<code>&lt;button&gt;</code>,然后在使用时可以加入新标签进行替换。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>哈哈哈<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>呵呵呵<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span>&gt;</span>呵呵呵<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是div元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是p元素<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是组件, 哈哈哈<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;button&gt;按钮&lt;/button&gt;--&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h4><p>确定插槽中的某个位置</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">&quot;center&quot;</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">slot</span>=<span class="string">&quot;left&quot;</span>&gt;</span>返回<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>左边<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>中间<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>右边<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>前端</tag>
      </tags>
  </entry>
</search>
