<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>测试44</title>
    <url>/post/4a4d8f87/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Diary</category>
        <category>PlayStation</category>
      </categories>
      <tags>
        <tag>PS3</tag>
      </tags>
  </entry>
  <entry>
    <title>vue学习总结基础篇（概念，基本语法）</title>
    <url>/post/d3428e7e/</url>
    <content><![CDATA[<p>vue学习笔记，用于自己查阅,<a href="https://www.bilibili.com/video/BV15741177Eh?share_source=copy_web">b站教程</a> 学习笔记。</p>
<span id="more"></span>

<h1 id="一、VUE基础"><a href="#一、VUE基础" class="headerlink" title="一、VUE基础"></a>一、VUE基础</h1><h2 id="1、概念部分"><a href="#1、概念部分" class="headerlink" title="1、概念部分"></a>1、概念部分</h2><p>官网：Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。<br>有了Vue帮助我们完成VueModel层的任务，在后续的开发，我们就可以专注于数据的处理，以及DOM的编写工作了。</p>
<h2 id="2、安装方式"><a href="#2、安装方式" class="headerlink" title="2、安装方式"></a>2、安装方式</h2><ol>
<li>直接CDN引入，直接在html文件中添加如下代码<br>开发版本<br><code>&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</code><br>生产环境版本<br><code>&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.6.12&quot;&gt;&lt;/script&gt;</code></li>
<li>下载和引入<br>在<a href="https://cn.vuejs.org/v2/guide/installation.html">官网</a>直接下载vue.js代码，并用<code>script</code>标签引入</li>
<li>通过NPM安装<br>使用webpack和cli时，用这种方式</li>
</ol>
<h2 id="3、第一个vue程序"><a href="#3、第一个vue程序" class="headerlink" title="3、第一个vue程序"></a>3、第一个vue程序</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// let(变量)/const(常量)</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 编程范式: 声明式编程</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>, <span class="comment">// 用于挂载要管理的元素</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123; <span class="comment">// 定义数据</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">message</span>: <span class="string">&#x27;你好&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">name</span>: <span class="string">&#x27;coderwhy&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>vue做法<br>创建Vue对象的时候，传入了一些options：{}<br>{}中包含了el属性：该属性决定了这个Vue对象挂载到哪一个元素上，很明显，我们这里是挂载到了id为app的元素上<br>{}中包含了data属性：该属性中通常会存储一些数据<br>这些数据可以是我们直接定义出来的，比如像上面这样。<br>也可能是来自网络，从服务器加载的。<br>在标签中间加入<code>&#123;&#123;   &#125;&#125;</code>，可以直接使用vue实例中的数据<ul>
<li>js的做法(编程范式: 命令式编程)<br>1.创建div元素,设置id属性<br> 2.定义一个变量叫message<br> 3.将message变量放在前面的div元素中显示<br> 4.修改message的数据: 今天天气不错!<br> 5.将修改后的数据再次替换到div元素</li>
</ul>
</li>
</ul>
<h2 id="4、创建vue实例中传入的options"><a href="#4、创建vue实例中传入的options" class="headerlink" title="4、创建vue实例中传入的options"></a>4、创建vue实例中传入的options</h2><ol>
<li>el挂载点<br>决定之后vue实例会管理哪一个DOM</li>
<li>data<br>实例对应的数据对象</li>
<li>methods<br>定义vue的一些方法</li>
</ol>
<h1 id="VUE语法"><a href="#VUE语法" class="headerlink" title="VUE语法"></a>VUE语法</h1><h2 id="计算属性的使用"><a href="#计算属性的使用" class="headerlink" title="计算属性的使用"></a>计算属性的使用</h2><p>1、我们知道可以通过<code>&#123;&#123;  &#125;&#125;</code>显示一些data中的数据<br>但在一些情况我们需要对数据进行一些转化后再显示，比如我们有firstName和lastName两个变量，我们需要显示完整的名称，那么差值语法就是+，这样显得很啰嗦。<br>我们可以将其改为计算属性显示</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"> .........</span><br><span class="line">computed: &#123;</span><br><span class="line">      fullName: function () &#123;</span><br><span class="line">        return this.firstName + &#x27; &#x27; + this.lastName</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>计算属性内部看似是一个函数，但是<code>&#123;&#123;  &#125;&#125;</code>中的“函数”可以不用加小括号（），而函数要达到相同效果，就如下个例子，需要加上（）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;getFullName()&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">...............</span><br><span class="line">methods: &#123;</span><br><span class="line">      getFullName() &#123;</span><br><span class="line">        return this.firstName + &#x27; &#x27; + this.lastName</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>2、计算属性也可以进行一些更加复杂的操作<br>例：计算图书的总价格</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">h2</span>&gt;</span>总价格: &#123;&#123;totalPrice&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">..................</span><br><span class="line">data: &#123;</span><br><span class="line">      books: [</span><br><span class="line">        &#123;id: 110, name: &#x27;Unix编程艺术&#x27;, price: 119&#125;,</span><br><span class="line">        &#123;id: 111, name: &#x27;代码大全&#x27;, price: 105&#125;,</span><br><span class="line">        &#123;id: 112, name: &#x27;深入理解计算机原理&#x27;, price: 98&#125;,</span><br><span class="line">        &#123;id: 113, name: &#x27;现代操作系统&#x27;, price: 87&#125;,</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">      totalPrice: function () &#123;</span><br><span class="line">        let result = 0</span><br><span class="line">        for (let i=0; i &lt; this.books.length; i++) &#123;</span><br><span class="line">          result += this.books[i].price</span><br><span class="line">        &#125;</span><br><span class="line">        return result</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>补充：methods和computed看起来都可以实现我们的功能，那么为什么还要多一个计算属性这个东西呢?计算属性会进行缓存，如果多次使用时，计算属性只会调用一次。而方法会调用多次，造成缓存增大。</p>
<h2 id="v-once指令"><a href="#v-once指令" class="headerlink" title="v-once指令"></a>v-once指令</h2><p>在某些情况下，我们希望data第一次加载之后，界面不能随意的改变<br><code>&lt;h2 v-once&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</code><br>这种情况下message不能随意更改。方法也不可以，一次定义。</p>
<h2 id="v-text指令"><a href="#v-text指令" class="headerlink" title="v-text指令"></a>v-text指令</h2><p>v-text作用和<code>&#123;&#123;  &#125;&#125;</code>比较相似：都是用于将数据显示在界面中<br><code>&lt;h2 v-text=&quot;message&quot;&gt; &lt;/h2&gt;</code></p>
<h2 id="v-html指令"><a href="#v-html指令" class="headerlink" title="v-html指令"></a>v-html指令</h2><p>某些情况下，我们从服务器请求到的数据本身就是一个HTML代码<br>如果我们直接通过<code>&#123;&#123; &#125;&#125;</code>来输出，会将HTML代码也一起输出。<br>但是我们可能希望的是按照HTML格式进行解析，并且显示对应的内容。<br>例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">      message: &#x27;你好啊&#x27;,</span><br><span class="line">      url: &#x27;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span>&gt;</span>百度一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&#x27;</span><br></pre></td></tr></table></figure>

<p>那我们就可以通过<br><code>&lt;h2 v-html=&quot;url&quot;&gt;&lt;/h2&gt;</code><br>将其解析出来<br><img data-src="2020091823545529.png" alt="解析后的效果"></p>
<h2 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a>v-pre</h2><p>v-pre用于跳过这个元素和它子元素的编译过程，用于显示原本的Mustache语法。<br>例 </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-pre</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>第一个h2元素中的内容会被编译解析出来对应的内容<br>第二个h2元素中会直接显示<br><img data-src="20200919095226188.png" alt="在这里插入图片描述"></p>
<h2 id="v-cloak指令"><a href="#v-cloak指令" class="headerlink" title="v-cloak指令"></a>v-cloak指令</h2><p>在vue解析之前，界面还没有被渲染，可能界面会直接出现,也就是卡住，那我们可以使用v-cloak指令，在vue解析之前, div中有一个属性v-cloak，属性v-cloak消失。那我们可以在style标签中设置vue还没解析之前，v-cloak指令所在的标签该如何显示。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-attr">[v-cloak]</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">v-cloak</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="v-bind指令"><a href="#v-bind指令" class="headerlink" title="v-bind指令"></a>v-bind指令</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>前面我们学习的指令主要作用是将值插入到我们模板的内容当中。<br>除了内容需要动态来决定外，某些属性我们也希望动态来绑定。<br>比如动态绑定a元素的href属性<br>比如动态绑定img元素的src属性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//错误的做法: 这里不可以使用mustache语法</span><br><span class="line"> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123;imgURL&#125;&#125;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="comment">&lt;!-- 正确的做法: 使用v-bind指令 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">&quot;imgURL&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;aHref&quot;</span>&gt;</span>百度一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">........</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">message</span>: <span class="string">&#x27;你好啊&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">imgURL</span>: <span class="string">&#x27;https://img11.360buyimg.com/mobilecms/s350x250_jfs/t1/20559/1/1424/73138/5c125595E3cbaa3c8/74fc2f84e53a9c23.jpg!q90!cc_350x250.webp&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">aHref</span>: <span class="string">&#x27;http://www.baidu.com&#x27;</span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这样我们就可以向属性传值。</p>
<h3 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h3><p><code>&lt;img v-bind:src=&quot;imgSrc&quot; alt=&quot;&quot;&gt;</code><br>可以简写成为<br><code>&lt;img  :src=&quot;imgSrc&quot; alt=&quot;&quot;&gt;</code></p>
<h3 id="v-bind绑定class"><a href="#v-bind绑定class" class="headerlink" title="v-bind绑定class"></a>v-bind绑定class</h3><p>有时我们希望动态的切换class,比如根据数据变化改变字体颜色。</p>
<ol>
<li>对象语法，:class后面跟一个对象</li>
</ol>
<ul>
<li>用法一：直接通过{}绑定一个类<br><code>&lt;h2 :class=&quot;&#123;&#39;active&#39;: isActive&#125;&quot;&gt;Hello World&lt;/h2&gt;</code></li>
<li>用法二：也可以通过判断，传入多个值,其中isActive,isLine是布尔值，通过它们的值来确定相应类是否存在<br><code>&lt;h2 :class=&quot;&#123;&#39;active&#39;: isActive, &#39;line&#39;: isLine&#125;&quot;&gt;Hello </code></li>
<li>用法四：如果过于复杂，可以放在一个methods或者computed中<br>注：classes是一个计算属性,它是一个函数，可以return相应的值<br><code>&lt;h2 class=&quot;title&quot; :class=&quot;classes&quot;&gt;Hello World&lt;/h2&gt;</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">getClasses: function () &#123;</span><br><span class="line">        return &#123;active: this.isActive, line: this.isLine&#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>数组语法<br>数组语法的含义是:class后面跟的是一个数组。<br><code>&lt;h2 :class=“[‘active’, &#39;line&#39;]&quot;&gt;Hello World&lt;/h2&gt;</code><br>注意：去掉引号是active变量</li>
</ol>
<h3 id="v-bind绑定style"><a href="#v-bind绑定style" class="headerlink" title="v-bind绑定style"></a>v-bind绑定style</h3><p>我们可以利用v-bind:style来绑定一些CSS内联样式。<br>在写CSS属性名的时候，比如font-size<br>我们可以使用驼峰式 (camelCase)  fontSize<br>或短横线分隔 (kebab-case，记得用单引号括起来) ‘font-size’<br>绑定class有两种方式：</p>
<ol>
<li>对象语法<br><code>&lt;!--&lt;h2 :style=&quot;&#123;key(属性名): value(属性值)&#125;&quot;&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;--&gt;</code></li>
</ol>
<p>例1：<br><code>&lt;!--&lt;h2 :style=&quot;&#123;fontSize: &#39;50px&#39;&#125;&quot;&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;--&gt;</code><br>其中，50px’必须加上单引号, 否则是当做一个变量去解析</p>
<p>例2：<br>finalSize当成一个变量使用,<br>  <code>&lt;!--&lt;h2 :style=&quot;&#123;fontSize: finalSize&#125;&quot;&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;--&gt;</code></p>
<p>  <code>&lt;h2 :style=&quot;&#123;fontSize: finalSize + &#39;px&#39;, backgroundColor: finalColor&#125;&quot;&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</code><br>  例3：使用函数返回值为对象传值</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">:style</span>=<span class="string">&quot;getStyles()&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    methods: &#123;</span><br><span class="line">    getStyles: function () &#123;</span><br><span class="line">      return &#123;fontSize: this.finalSize + &#x27;px&#x27;, backgroundColor: this.finalColor&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>数组语法<br>当要改动的样式比较多的时候，可以考虑用一下数组语法</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">:style</span>=<span class="string">&quot;[baseStyle, baseStyle1]&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    data: &#123;</span><br><span class="line">      message: &#x27;你好啊&#x27;,</span><br><span class="line">      baseStyle: &#123;backgroundColor: &#x27;red&#x27;&#125;,</span><br><span class="line">      baseStyle1: &#123;fontSize: &#x27;100px&#x27;&#125;,</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="v-on指令"><a href="#v-on指令" class="headerlink" title="v-on指令"></a>v-on指令</h2><p>1、v-on指令用于事件监听，与用户交互，缩写是@<br>例，计数器</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;counter&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;decrement&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">counter</span>: <span class="number">0</span></span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">increment</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.counter++</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">decrement</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.counter--</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、参数问题<br>当方法中无参传入时，如上例所示，可省略小括号。</p>
<p>3、v-on修饰符</p>
<ul>
<li>.stop - 调用 event.stopPropagation()。<br>阻止子元素方法事件冒泡到父元素。例：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">&quot;divClick&quot;</span>&gt;</span></span><br><span class="line">   aaaaaaa</span><br><span class="line">   <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">&quot;btnClick&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>若不使用.stop修饰符，在点击按钮时，父元素的divClick方法也会被执行，这种情况一般是我们不想遇到的。</p>
<ul>
<li>.prevent - 调用 event.preventDefault()。<br>阻止元素发生默认的行为</li>
<li>. @keyup.enter=”keyUp” -<br>监听某个键盘的键帽，此例只有按下回车才会执行回调。。</li>
<li>.native - 监听组件根元素的原生事件。</li>
<li>.once - 只触发一次回调。</li>
</ul>
<h2 id="v-if指令"><a href="#v-if指令" class="headerlink" title="v-if指令"></a>v-if指令</h2><p>v-if、v-else-if、v-else<br>条件指令，可根据表达式的值在DOM中渲染销毁组件<br>v-if的原理：<br>v-if后面的条件为false时，对应的元素以及其子元素不会渲染。<br>也就是根本没有不会有对应的标签出现在DOM中。<br>例：根据学生分数值，在页面显示优秀，良好，及格等标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-if</span>=<span class="string">&quot;score&gt;=90&quot;</span>&gt;</span>优秀<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-else-if</span>=<span class="string">&quot;score&gt;=80&quot;</span>&gt;</span>良好<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-else-if</span>=<span class="string">&quot;score&gt;=60&quot;</span>&gt;</span>及格<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-else</span>&gt;</span>不及格<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="v-show指令"><a href="#v-show指令" class="headerlink" title="v-show指令"></a>v-show指令</h2><p><code> &lt;h2 v-show=&quot;isShow&quot; id=&quot;bbb&quot;&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</code><br>当isShow为true时,message内容显示，否则内容消失</p>
<p>v-show的用法和v-if非常相似，也用于决定一个元素是否渲染：<br>两者的区别：<br>v-if当条件为false时，压根不会有对应的元素在DOM中。<br>v-show当条件为false时，仅仅是将元素的display属性设置为none而已。</p>
<h2 id="v-for指令"><a href="#v-for指令" class="headerlink" title="v-for指令"></a>v-for指令</h2><h3 id="v-for遍历数组"><a href="#v-for遍历数组" class="headerlink" title="v-for遍历数组"></a>v-for遍历数组</h3><p>格式：v-for=(item, index) in 数组<br>其中的index就代表了取出的item在原数组的索引值。<br><code>&lt;li v-for=&quot;item in names&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;</code></p>
<h3 id="v-for遍历对象"><a href="#v-for遍历对象" class="headerlink" title="v-for遍历对象"></a>v-for遍历对象</h3><p>v-for可以用户遍历对象：<br>比如某个对象中存储着你的个人信息，我们希望以列表的形式显示出来。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in info&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--2.获取key和value 格式: (value, key) --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(value, key) in info&quot;</span>&gt;</span>&#123;&#123;value&#125;&#125;-&#123;&#123;key&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!--3.获取key和value和index 格式: (value, key, index) --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(value, key, index) in info&quot;</span>&gt;</span>&#123;&#123;value&#125;&#125;-&#123;&#123;key&#125;&#125;-&#123;&#123;index&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">......</span><br><span class="line">data: &#123;</span><br><span class="line">      info: &#123;</span><br><span class="line">        name: &#x27;why&#x27;,</span><br><span class="line">        age: 18,</span><br><span class="line">        height: 1.88</span><br><span class="line">      &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<h2 id="v-model指令"><a href="#v-model指令" class="headerlink" title="v-model指令"></a>v-model指令</h2><p>1、简介<br>v-model用于表单绑定<br>来实现表单元素和数据的双向绑定。<br>当我们在输入框输入内容时<br>因为input中的v-model绑定了message，所以会实时将输入的内容传递给message，message发生改变。<br>当message发生改变时，因为上面我们使用Mustache语法，将message的值插入到DOM中，所以DOM会发生响应的改变。<br>所以，通过v-model实现了双向的绑定。<br>2、原理<br>v-model其实是一个语法糖，它的背后本质上是包含两个操作：</p>
<ol>
<li>v-bind绑定一个value属性</li>
<li>v-on指令给当前元素绑定input事件<br><img data-src="20200926105854937.png" alt="在这里插入图片描述"></li>
</ol>
<p>3、radio<br>当存在多个单选框时<br>lable标签：为input元素定义标注，其不会为用户呈现任何特殊效果，他的作用是在label元素中点击文本，则会触发控件，其for属性应当与相关元素的 id 属性相同。for” 属性可把 label 绑定到另外一个元素，规定应与哪个表单元素绑定。<br>input 标签规定了用户可以在其中输入数据的输入字段。</p>
<ul>
<li>输入字段可通过多种方式改变，取决于 type 属性。type 属性规定要显示的 input元素的类型。</li>
<li>value属性指定 <code>&lt;input&gt;</code> 元素 value 的值<br>例程：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;male&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;male&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>男</span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;female&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;female&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>女</span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>您选择的性别是: &#123;&#123;sex&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">message</span>: <span class="string">&#x27;你好啊&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">sex</span>: <span class="string">&#x27;女&#x27;</span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>4、checkbox<br>定义复选框。<br>例程：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>您的爱好是: &#123;&#123;hobbies&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">v-for</span>=<span class="string">&quot;item in originHobbies&quot;</span> <span class="attr">:for</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;item&quot;</span> <span class="attr">:id</span>=<span class="string">&quot;item&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>5、select<br>select标签用来创建下拉列表。<br>select 标签中的 <option> 标签定义了列表中的可用选项。<br>multiple    当该属性为 true 时，可选择多个选项。<br>例程：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;abc&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;fruit&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;苹果&quot;</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;香蕉&quot;</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;榴莲&quot;</span>&gt;</span>榴莲<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;葡萄&quot;</span>&gt;</span>葡萄<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>您选择的水果是: &#123;&#123;fruit&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>6、v-model修饰符</p>
<ul>
<li>lazy修饰符：<br>默认情况下，v-model默认是在input事件中同步输入框的数据的。<br>lazy修饰符可以让数据在失去焦点或者回车时才会更新：</li>
<li>number修饰符：<br>默认情况下，在输入框中无论我们输入的是字母还是数字，都会被当做字符串类型进行处理。<br>number修饰符可以让在输入框中输入的内容自动转成数字类型：</li>
<li>trim修饰符：<br>如果输入的内容首尾有很多空格，通常我们希望将其去除<br>trim修饰符可以过滤内容左右两边的空格</li>
</ul>
<h2 id="检测数组更新"><a href="#检测数组更新" class="headerlink" title="检测数组更新"></a>检测数组更新</h2><p>因为Vue是响应式的，所以当数据发生变化时，Vue会自动检测数据变化，视图会发生对应的更新。<br>Vue中包含了一组观察数组编译的方法，使用它们改变数组也会触发视图的更新。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 1.push() 在数组最后添加元素</span><br><span class="line">       //this.letters.push(&#x27;aaa&#x27;)</span><br><span class="line">      // this.letters.push(&#x27;aaaa&#x27;, &#x27;bbbb&#x27;, &#x27;cccc&#x27;)</span><br><span class="line"></span><br><span class="line">      // 2.pop(): 删除数组中的最后一个元素</span><br><span class="line">      // this.letters.pop();</span><br><span class="line"></span><br><span class="line">      // 3.shift(): 删除数组中的第一个元素</span><br><span class="line">      // this.letters.shift();</span><br><span class="line"></span><br><span class="line">      // 4.unshift(): 在数组最前面添加元素</span><br><span class="line">      // this.letters.unshift()</span><br><span class="line">      // this.letters.unshift(&#x27;aaa&#x27;, &#x27;bbb&#x27;, &#x27;ccc&#x27;)</span><br><span class="line"></span><br><span class="line">      // 5.splice作用: 删除元素/插入元素/替换元素</span><br><span class="line">      //第一个参数，定位开始位置</span><br><span class="line">      // 删除元素: 第二个参数传入你要删除几个元素(如果没有传,就删除后面所有的元素)</span><br><span class="line">      // 替换元素: 第二个参数, 表示我们要替换几个元素, 后面是用于替换前面的元素</span><br><span class="line">      // 插入元素: 第二个参数, 传入0, 并且后面跟上要插入的元素</span><br><span class="line">      // splice(start)</span><br><span class="line">      // splice(start):</span><br><span class="line">      //this.letters.splice(1, 3, &#x27;m&#x27;, &#x27;n&#x27;, &#x27;l&#x27;, &#x27;x&#x27;)</span><br><span class="line">      // this.letters.splice(1, 0, &#x27;x&#x27;, &#x27;y&#x27;, &#x27;z&#x27;)</span><br><span class="line"></span><br><span class="line">      // 5.sort()    数组排序</span><br><span class="line">      // this.letters.sort()</span><br><span class="line"></span><br><span class="line">      // 6.reverse()  数组翻转</span><br><span class="line">      // this.letters.reverse()</span><br></pre></td></tr></table></figure>

<p>// 注意: 通过索引值修改数组中的元素<br>         this.letters[0] = ‘bbbbbb’;  这种界面不能实时更新</p>
<pre><code>    // set(要修改的对象, 索引值, 修改后的值)
    // Vue.set(this.letters, 0, &#39;bbbbbb&#39;
</code></pre>
<h2 id="js高阶函数"><a href="#js高阶函数" class="headerlink" title="js高阶函数"></a>js高阶函数</h2><h3 id="1-filter函数的使用"><a href="#1-filter函数的使用" class="headerlink" title="1.filter函数的使用"></a>1.filter函数的使用</h3><p>filter函数，用来过滤符合要求的数组中的值<br>filter中的回调函数有一个要求: 必须返回一个boolean值<br>true: 当返回true时, 函数内部会自动将这次回调的n加入到新的数组中<br>false: 当返回false时, 函数内部会过滤掉这次的n<br>例：<br>给出一个数组  const nums = [10, 20, 111, 222, 444, 40, 50]<br>挑出所有少于100的值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">let newNums = nums.filter(function (n) &#123;</span><br><span class="line">  return n &lt; 100</span><br><span class="line">&#125;)</span><br><span class="line">console.log(newNums);</span><br></pre></td></tr></table></figure>

<h3 id="2-map函数的使用"><a href="#2-map函数的使用" class="headerlink" title="2.map函数的使用"></a>2.map函数的使用</h3><p>对数组中的值进行处理，例如都乘二</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">let new2Nums = newNums.map(function(n))&#123;</span><br><span class="line">	return n*2;</span><br><span class="line">&#125;</span><br><span class="line"> console.log(newNums);</span><br></pre></td></tr></table></figure>

<h3 id="3-reduce函数的使用"><a href="#3-reduce函数的使用" class="headerlink" title="3.reduce函数的使用"></a>3.reduce函数的使用</h3><p>对数组中的元素进行汇总<br>例：求和</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">let total = new2Nums.reduce(function (preValue, n) &#123;</span><br><span class="line"> return preValue + n</span><br><span class="line">&#125;, 0)</span><br><span class="line">console.log(total);</span><br></pre></td></tr></table></figure>

<p>其中上面的0，为初始值，preValue值为每一次运算返回的值</p>
<h3 id="4，三种汇总"><a href="#4，三种汇总" class="headerlink" title="4，三种汇总"></a>4，三种汇总</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let total = nums.filter(function (n) &#123;</span><br><span class="line">  return n &lt; 100</span><br><span class="line">&#125;).map(function (n) &#123;</span><br><span class="line">  return n * 2</span><br><span class="line">&#125;).reduce(function (prevValue, n) &#123;</span><br><span class="line">  return prevValue + n</span><br><span class="line">&#125;, 0)</span><br><span class="line">console.log(total);</span><br></pre></td></tr></table></figure>

<h2 id="组件化开发"><a href="#组件化开发" class="headerlink" title="组件化开发"></a>组件化开发</h2><h3 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h3><p>将复杂的问题拆解成简单的小问题，便于处理，放在网页中，就是将一个页面分成一个个小的功能块，每个功能块完成属于自己这部分独立的功能，便于后续地管理和扩展，也便于移植，可复用<br><img data-src="watermark.png" alt="watermark"></p>
<h3 id="二、使用步骤"><a href="#二、使用步骤" class="headerlink" title="二、使用步骤"></a>二、使用步骤</h3><p>分为</p>
<ul>
<li>创建组件构造器（调用Vue.extend()方法，template下加入模板）</li>
<li>注册组件 （调用Vue.component(方法)）</li>
<li>使用组件 （在Vue实例范围内使用）</li>
</ul>
<p>代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">my-cpn</span>&gt;</span> </span><br><span class="line">  <span class="comment">&lt;!--使用组件--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="comment">//创建组件构造器对象</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> cpnC = Vue.extend(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">template</span>:<span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="javascript">    &lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">      &lt;h2&gt;我是标题&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">      &lt;p&gt;我是内容1&lt;/p&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">      &lt;p&gt;我是内容2&lt;/p&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">    &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">    `</span></span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="comment">//注册组件</span></span></span><br><span class="line"><span class="javascript">  Vue.component(<span class="string">&#x27;my-cpn&#x27;</span>,cpnC)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3、全局组件和局部组件"><a href="#3、全局组件和局部组件" class="headerlink" title="3、全局组件和局部组件"></a>3、全局组件和局部组件</h3><p>当我们通过调用Vue.component()注册组件时，组件的注册是全局的<br>这意味着该组件可以在任意Vue示例下使用。<br>如果我们注册的组件是挂载在某个实例中, 那么就是一个局部组件<br>例：下面组件挂载到app中，那么就只能在id=app下使用。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app2&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 1.创建组件构造器</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> cpnC = Vue.extend(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="javascript">      &lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">        &lt;h2&gt;我是标题&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">        &lt;p&gt;我是内容,哈哈哈哈啊&lt;/p&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">      &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">    `</span></span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 2.注册组件(全局组件, 意味着可以在多个Vue的实例下面使用)</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// Vue.component(&#x27;cpn&#x27;, cpnC)</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 疑问: 怎么注册的组件才是局部组件了?</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">message</span>: <span class="string">&#x27;你好啊&#x27;</span></span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// cpn使用组件时的标签名</span></span></span><br><span class="line"><span class="javascript">      <span class="attr">cpn</span>: cpnC</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app2 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app2&#x27;</span></span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="父组件和子组件"><a href="#父组件和子组件" class="headerlink" title="父组件和子组件"></a>父组件和子组件</h3><p>组件和组件之间存在层级关系<br>而其中一种非常重要的关系就是父子组件的关系<br>将子组件注册到父组件的组件构造器中<br>子组件不能直接使用，通过父组件调用。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="handlebars"><span class="xml"></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">  // 1.创建第一个组件构造器(子组件)</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">  const cpnC1 = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    template: `</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是标题1<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是内容, 哈哈哈哈<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    `</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">  &#125;)</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">  // 2.创建第二个组件构造器(父组件)</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">  const cpnC2 = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    template: `</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是标题2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是内容, 呵呵呵呵<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        <span class="tag">&lt;<span class="name">cpn1</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn1</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    `,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    components: &#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">      cpn1: cpnC1</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    &#125;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">  &#125;)</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">  // root组件</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">  const app = new Vue(&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    el: &#x27;#app&#x27;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    data: &#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">      message: &#x27;你好啊&#x27;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    &#125;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    components: &#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">      cpn2: cpnC2</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    &#125;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">  &#125;)</span></span></span><br><span class="line"><span class="xml"><span class="handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="注册组件的简写"><a href="#注册组件的简写" class="headerlink" title="注册组件的简写"></a>注册组件的简写</h3><p>在注册之时将组件构造器加到注册时<br>简写前:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">const cpnC = Vue.extend(&#123;</span><br><span class="line">  template:`</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是内容1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是内容2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  `</span><br><span class="line">&#125;)</span><br><span class="line">//注册组件</span><br><span class="line">Vue.component(&#x27;my-cpn&#x27;,cpnC)</span><br><span class="line"></span><br><span class="line">  const app = new Vue(&#123;</span><br><span class="line">  el: &#x27;#app&#x27;,</span><br><span class="line">  data: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>简写后：</p>
<ul>
<li>全局组件</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Vue.component(&#x27;cpn1&#x27;, &#123;</span><br><span class="line">  template: `</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是标题1<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是内容, 哈哈哈哈<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  `</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>局部组件</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">const app = new Vue(&#123;</span><br><span class="line">  el: &#x27;#app&#x27;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: &#x27;你好啊&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    &#x27;cpn2&#x27;: &#123;</span><br><span class="line">      template: `</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是标题2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是内容, 呵呵呵<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  `</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="模板分离写法"><a href="#模板分离写法" class="headerlink" title="模板分离写法"></a>模板分离写法</h3><p>以上组件html代码都在template中，我们希望将html代码分离出来，然后挂载到相应组件中，这样更加清晰<br>给template标签加个id,然后再template中调用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是内容,呵呵呵<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 1.注册一个全局组件</span></span></span><br><span class="line"><span class="javascript">  Vue.component(<span class="string">&#x27;cpn&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">template</span>: <span class="string">&#x27;#cpn&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">title</span>: <span class="string">&#x27;abc&#x27;</span></span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br></pre></td></tr></table></figure>

<h3 id="组件数据的存放"><a href="#组件数据的存放" class="headerlink" title="组件数据的存放"></a>组件数据的存放</h3><p>Vue组件有自己保存数据的地方。组件对象也有一个data属性，只是这个data属性必须是一个函数。而且这个函数返回一个对象，对象内部保存着数据</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Vue.component(&#x27;cpn&#x27;, &#123;</span><br><span class="line">    template: &#x27;#cpn&#x27;,</span><br><span class="line">     data() &#123;</span><br><span class="line">       return &#123;</span><br><span class="line">         counter: 0</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;,</span><br><span class="line"></span><br><span class="line">    methods: &#123;</span><br><span class="line">      increment() &#123;</span><br><span class="line">        this.counter++</span><br><span class="line">      &#125;,</span><br><span class="line">      decrement() &#123;</span><br><span class="line">        this.counter--</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<h3 id="组件通信："><a href="#组件通信：" class="headerlink" title="组件通信："></a>组件通信：</h3><p>如何进行父子组件间的通信呢？Vue官方提到<br>通过props向子组件传递数据<br>通过事件向父组件发送消息<br><img data-src="watermark.png" alt="watermark"></p>
<h4 id="父组件向子组件传递数据"><a href="#父组件向子组件传递数据" class="headerlink" title="父组件向子组件传递数据"></a>父组件向子组件传递数据</h4><p>在开发中，往往一些数据确实需要从上层传递到下层：<br>比如在一个页面中，我们从服务器请求到了很多的数据。<br>其中一部分数据，并非是我们整个页面的大组件来展示的，而是需要下面的子组件进行展示。<br>这个时候，并不会让子组件再次发送一个网络请求，而是直接让大组件(父组件)将数据传递给小组件(子组件)<br>Vue实例和子组件的通信和父组件和子组件的通信过程是一样的。<br>props基本用法<br>在组件中，使用选项props来声明需要从父级接收到的数据。<br>props的值有两种方式：<br>方式一：字符串数组，数组中的字符串就是传递时的名称。<br>方式二：对象，对象可以设置传递时的类型，也可以设置默认值等。（常用）</p>
<ol>
<li>一个最简单的props传递。</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">child-cpn</span> <span class="attr">:message</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child-cpn</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;childCpn&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"> 显示的信息：&#123;&#123;message&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 1.注册组件</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">message</span>: <span class="string">&#x27;你好啊&#x27;</span></span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">components</span>:&#123;</span></span><br><span class="line"><span class="javascript">      <span class="string">&#x27;child-cpn&#x27;</span>:&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">template</span>:<span class="string">&#x27;#childCpn&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">props</span>:[<span class="string">&#x27;message&#x27;</span>]  <span class="comment">//props传值</span></span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>传对象值，可以设置默认类型</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 父传子: props</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> cpn = &#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">template</span>: <span class="string">&#x27;#cpn&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="comment">// props: [&#x27;cmovies&#x27;, &#x27;cmessage&#x27;],</span></span></span><br><span class="line"><span class="javascript">    <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 1.类型限制</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// cmovies: Array,</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// cmessage: String,</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 2.提供一些默认值, 以及必传值</span></span></span><br><span class="line"><span class="javascript">      <span class="attr">cmessage</span>: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">type</span>: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">default</span>: <span class="string">&#x27;aaaaaaaa&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">required</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 类型是对象或者数组时, 默认值必须是一个函数</span></span></span><br><span class="line"><span class="javascript">      <span class="attr">cmovies</span>: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">type</span>: <span class="built_in">Array</span>,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">default</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> []</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;&#125;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">message</span>: <span class="string">&#x27;你好啊&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">movies</span>: [<span class="string">&#x27;海王&#x27;</span>, <span class="string">&#x27;海贼王&#x27;</span>, <span class="string">&#x27;海尔兄弟&#x27;</span>]</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="javascript">      cpn</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br></pre></td></tr></table></figure>

<h4 id="子传父"><a href="#子传父" class="headerlink" title="子传父"></a>子传父</h4><p>当子组件需要向父组件传递数据时，就要用到自定义事件了。<br>我们之前学习的v-on不仅仅可以用于监听DOM事件，也可以用于组件间的自定义事件。<br>自定义事件的流程：</p>
<ul>
<li>在子组件中，通过$emit()来触发事件。</li>
<li>在父组件中，通过v-on来监听子组件事件。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--父组件模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span> @<span class="attr">item-click</span>=<span class="string">&quot;cpnClick&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--子组件模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-for</span>=<span class="string">&quot;item in categories&quot;</span></span></span><br><span class="line"><span class="tag">            @<span class="attr">click</span>=<span class="string">&quot;btnClick(item)&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123;item.name&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 1.子组件</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> cpn = &#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">template</span>: <span class="string">&#x27;#cpn&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">categories</span>: [</span></span><br><span class="line"><span class="javascript">          &#123;<span class="attr">id</span>: <span class="string">&#x27;aaa&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;热门推荐&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">          &#123;<span class="attr">id</span>: <span class="string">&#x27;bbb&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;手机数码&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">          &#123;<span class="attr">id</span>: <span class="string">&#x27;ccc&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;家用家电&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">          &#123;<span class="attr">id</span>: <span class="string">&#x27;ddd&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;电脑办公&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">        ]</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">btnClick</span>(<span class="params">item</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 发射事件: 自定义事件</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$emit(<span class="string">&#x27;item-click&#x27;</span>, item)</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 2.父组件</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">message</span>: <span class="string">&#x27;你好啊&#x27;</span></span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="javascript">      cpn</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">cpnClick</span>(<span class="params">item</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&#x27;cpnClick&#x27;</span>, item);</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="父子之间"><a href="#父子之间" class="headerlink" title="父子之间"></a>父子之间</h3><p>有时候我们需要父组件直接访问子组件，子组件直接访问父组件，或者是子组件访问跟组件。<br>父组件访问子组件：使用<code>$children</code>或<code>$refs reference</code>(引用)<br>子组件访问父组件：使用<code>$parent</code></p>
<h4 id="父访问子"><a href="#父访问子" class="headerlink" title="父访问子"></a>父访问子</h4><ol>
<li>$children方式 ,(数组方式)</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> console.log(this.$children);</span><br><span class="line"> for (let c of this.$children) &#123;</span><br><span class="line">   console.log(c.name);</span><br><span class="line">   c.showMessage();</span><br><span class="line">&#125;</span><br><span class="line"> console.log(this.$children[3].name);</span><br></pre></td></tr></table></figure>

<p>2，<code>$refs =&gt;</code> 对象类型, 默认是一个空的对象<br>通过<code>$children</code>访问子组件时，是一个数组类型，访问其中的子组件必须通过索引值。<br>但是当子组件过多，我们需要拿到其中一个时，往往不能确定它的索引值，甚至还可能会发生变化。<br>有时候，我们想明确获取其中一个特定的组件，这个时候就可以使用<code>$refs</code></p>
<p><code>$refs</code> 的使用：<br><code>$refs</code> 和ref指令通常是一起使用的。<br>首先，我们通过ref给某一个子组件绑定一个特定的ID。<br>其次，通过<code>this.$refs.ID</code>就可以访问到该组件了。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">my-cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">y-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">y-cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span> <span class="attr">ref</span>=<span class="string">&quot;aaa&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btnClick&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是子组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">message</span>: <span class="string">&#x27;你好啊&#x27;</span></span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">btnClick</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        </span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.$refs.aaa.name);</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">cpn</span>: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">template</span>: <span class="string">&#x27;#cpn&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">name</span>: <span class="string">&#x27;我是子组件的name&#x27;</span></span></span><br><span class="line"><span class="javascript">          &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">          <span class="function"><span class="title">showMessage</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&#x27;showMessage&#x27;</span>);</span></span><br><span class="line"><span class="javascript">          &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="子访问父（避免使用）"><a href="#子访问父（避免使用）" class="headerlink" title="子访问父（避免使用）"></a>子访问父（避免使用）</h4><p>如果我们想在子组件中直接访问父组件，可以通过$parent</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是cpn组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ccpn</span>&gt;</span><span class="tag">&lt;/<span class="name">ccpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;ccpn&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是子组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btnClick&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">message</span>: <span class="string">&#x27;你好啊&#x27;</span></span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">cpn</span>: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">template</span>: <span class="string">&#x27;#cpn&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">name</span>: <span class="string">&#x27;我是cpn组件的name&#x27;</span></span></span><br><span class="line"><span class="javascript">          &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">ccpn</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">template</span>: <span class="string">&#x27;#ccpn&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">              <span class="function"><span class="title">btnClick</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                 <span class="number">1.</span>访问父组件$parent</span></span><br><span class="line"><span class="javascript">                 <span class="built_in">console</span>.log(<span class="built_in">this</span>.$parent);</span></span><br><span class="line"><span class="javascript">                 <span class="built_in">console</span>.log(<span class="built_in">this</span>.$parent.name);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                 <span class="number">2.</span>访问根组件$root</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="built_in">this</span>.$root);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="built_in">this</span>.$root.message);</span></span><br><span class="line"><span class="javascript">              &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">          &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="组件化高级"><a href="#组件化高级" class="headerlink" title="组件化高级"></a>组件化高级</h3><h4 id="slot（插槽）"><a href="#slot（插槽）" class="headerlink" title="slot（插槽）"></a>slot（插槽）</h4><p>组件的插槽是为了让我们封装的组件更加具有扩展性。<br>让使用者可以决定组件内部的一些内容到底展示什么。<br>最好的封装方式就是将共性抽取到组件中，将不同暴露为插槽。<br>一旦我们预留了插槽，就可以让使用者根据自己的需求，决定插槽中插入什么内容。<br>插槽的基本使用 <slot></slot><br>插槽的默认值 <slot>button</slot><br>如果有多个值, 同时放入到组件进行替换时, 一起作为替换元素<br>例：在模板中加入插槽，默认值是<code>&lt;button&gt;</code>,然后在使用时可以加入新标签进行替换。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>哈哈哈<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>呵呵呵<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span>&gt;</span>呵呵呵<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是div元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是p元素<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是组件, 哈哈哈<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;button&gt;按钮&lt;/button&gt;--&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h4><p>确定插槽中的某个位置</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">&quot;center&quot;</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">slot</span>=<span class="string">&quot;left&quot;</span>&gt;</span>返回<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>左边<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>中间<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>右边<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>前端</tag>
      </tags>
  </entry>
</search>
